//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Speed : IQuantity
#else
    public partial struct Speed : IQuantity, IComparable, IComparable<Speed>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpeedUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public SpeedUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static Speed()
        {
            BaseDimensions = new BaseDimensions(1, 0, -1, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        private
#else
        public
#endif
        Speed(double numericValue, SpeedUnit unit)
        {
            if(unit == SpeedUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Speed;

        /// <summary>
        ///     The base unit of Speed, which is MeterPerSecond. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit => SpeedUnit.MeterPerSecond;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the Speed quantity.
        /// </summary>
        public static SpeedUnit[] Units { get; } = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>().Except(new SpeedUnit[]{ SpeedUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get Speed in CentimetersPerHour.
        /// </summary>
        public double CentimetersPerHour => As(SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Get Speed in CentimetersPerMinutes.
        /// </summary>
        public double CentimetersPerMinutes => As(SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Get Speed in CentimetersPerSecond.
        /// </summary>
        public double CentimetersPerSecond => As(SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Get Speed in DecimetersPerMinutes.
        /// </summary>
        public double DecimetersPerMinutes => As(SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Get Speed in DecimetersPerSecond.
        /// </summary>
        public double DecimetersPerSecond => As(SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Get Speed in FeetPerHour.
        /// </summary>
        public double FeetPerHour => As(SpeedUnit.FootPerHour);

        /// <summary>
        ///     Get Speed in FeetPerMinute.
        /// </summary>
        public double FeetPerMinute => As(SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Get Speed in FeetPerSecond.
        /// </summary>
        public double FeetPerSecond => As(SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Get Speed in InchesPerHour.
        /// </summary>
        public double InchesPerHour => As(SpeedUnit.InchPerHour);

        /// <summary>
        ///     Get Speed in InchesPerMinute.
        /// </summary>
        public double InchesPerMinute => As(SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Get Speed in InchesPerSecond.
        /// </summary>
        public double InchesPerSecond => As(SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Get Speed in KilometersPerHour.
        /// </summary>
        public double KilometersPerHour => As(SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Get Speed in KilometersPerMinutes.
        /// </summary>
        public double KilometersPerMinutes => As(SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Get Speed in KilometersPerSecond.
        /// </summary>
        public double KilometersPerSecond => As(SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Get Speed in Knots.
        /// </summary>
        public double Knots => As(SpeedUnit.Knot);

        /// <summary>
        ///     Get Speed in MetersPerHour.
        /// </summary>
        public double MetersPerHour => As(SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Get Speed in MetersPerMinutes.
        /// </summary>
        public double MetersPerMinutes => As(SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Get Speed in MetersPerSecond.
        /// </summary>
        public double MetersPerSecond => As(SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Get Speed in MicrometersPerMinutes.
        /// </summary>
        public double MicrometersPerMinutes => As(SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Get Speed in MicrometersPerSecond.
        /// </summary>
        public double MicrometersPerSecond => As(SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Get Speed in MilesPerHour.
        /// </summary>
        public double MilesPerHour => As(SpeedUnit.MilePerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerHour.
        /// </summary>
        public double MillimetersPerHour => As(SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Get Speed in MillimetersPerMinutes.
        /// </summary>
        public double MillimetersPerMinutes => As(SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Get Speed in MillimetersPerSecond.
        /// </summary>
        public double MillimetersPerSecond => As(SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Get Speed in NanometersPerMinutes.
        /// </summary>
        public double NanometersPerMinutes => As(SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Get Speed in NanometersPerSecond.
        /// </summary>
        public double NanometersPerSecond => As(SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerHour.
        /// </summary>
        public double UsSurveyFeetPerHour => As(SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerMinute.
        /// </summary>
        public double UsSurveyFeetPerMinute => As(SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Get Speed in UsSurveyFeetPerSecond.
        /// </summary>
        public double UsSurveyFeetPerSecond => As(SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Get Speed in YardsPerHour.
        /// </summary>
        public double YardsPerHour => As(SpeedUnit.YardPerHour);

        /// <summary>
        ///     Get Speed in YardsPerMinute.
        /// </summary>
        public double YardsPerMinute => As(SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Get Speed in YardsPerSecond.
        /// </summary>
        public double YardsPerSecond => As(SpeedUnit.YardPerSecond);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
        /// </summary>
        public static Speed Zero => new Speed(0, BaseUnit);

        /// <summary>
        ///     Get Speed from CentimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerHour(double centimetersperhour)
#else
        public static Speed FromCentimetersPerHour(QuantityValue centimetersperhour)
#endif
        {
            double value = (double) centimetersperhour;
            return new Speed(value, SpeedUnit.CentimeterPerHour);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerMinutes(double centimetersperminutes)
#else
        public static Speed FromCentimetersPerMinutes(QuantityValue centimetersperminutes)
#endif
        {
            double value = (double) centimetersperminutes;
            return new Speed(value, SpeedUnit.CentimeterPerMinute);
        }

        /// <summary>
        ///     Get Speed from CentimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromCentimetersPerSecond(double centimeterspersecond)
#else
        public static Speed FromCentimetersPerSecond(QuantityValue centimeterspersecond)
#endif
        {
            double value = (double) centimeterspersecond;
            return new Speed(value, SpeedUnit.CentimeterPerSecond);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecimetersPerMinutes(double decimetersperminutes)
#else
        public static Speed FromDecimetersPerMinutes(QuantityValue decimetersperminutes)
#endif
        {
            double value = (double) decimetersperminutes;
            return new Speed(value, SpeedUnit.DecimeterPerMinute);
        }

        /// <summary>
        ///     Get Speed from DecimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromDecimetersPerSecond(double decimeterspersecond)
#else
        public static Speed FromDecimetersPerSecond(QuantityValue decimeterspersecond)
#endif
        {
            double value = (double) decimeterspersecond;
            return new Speed(value, SpeedUnit.DecimeterPerSecond);
        }

        /// <summary>
        ///     Get Speed from FeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerHour(double feetperhour)
#else
        public static Speed FromFeetPerHour(QuantityValue feetperhour)
#endif
        {
            double value = (double) feetperhour;
            return new Speed(value, SpeedUnit.FootPerHour);
        }

        /// <summary>
        ///     Get Speed from FeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerMinute(double feetperminute)
#else
        public static Speed FromFeetPerMinute(QuantityValue feetperminute)
#endif
        {
            double value = (double) feetperminute;
            return new Speed(value, SpeedUnit.FootPerMinute);
        }

        /// <summary>
        ///     Get Speed from FeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromFeetPerSecond(double feetpersecond)
#else
        public static Speed FromFeetPerSecond(QuantityValue feetpersecond)
#endif
        {
            double value = (double) feetpersecond;
            return new Speed(value, SpeedUnit.FootPerSecond);
        }

        /// <summary>
        ///     Get Speed from InchesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerHour(double inchesperhour)
#else
        public static Speed FromInchesPerHour(QuantityValue inchesperhour)
#endif
        {
            double value = (double) inchesperhour;
            return new Speed(value, SpeedUnit.InchPerHour);
        }

        /// <summary>
        ///     Get Speed from InchesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerMinute(double inchesperminute)
#else
        public static Speed FromInchesPerMinute(QuantityValue inchesperminute)
#endif
        {
            double value = (double) inchesperminute;
            return new Speed(value, SpeedUnit.InchPerMinute);
        }

        /// <summary>
        ///     Get Speed from InchesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromInchesPerSecond(double inchespersecond)
#else
        public static Speed FromInchesPerSecond(QuantityValue inchespersecond)
#endif
        {
            double value = (double) inchespersecond;
            return new Speed(value, SpeedUnit.InchPerSecond);
        }

        /// <summary>
        ///     Get Speed from KilometersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerHour(double kilometersperhour)
#else
        public static Speed FromKilometersPerHour(QuantityValue kilometersperhour)
#endif
        {
            double value = (double) kilometersperhour;
            return new Speed(value, SpeedUnit.KilometerPerHour);
        }

        /// <summary>
        ///     Get Speed from KilometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerMinutes(double kilometersperminutes)
#else
        public static Speed FromKilometersPerMinutes(QuantityValue kilometersperminutes)
#endif
        {
            double value = (double) kilometersperminutes;
            return new Speed(value, SpeedUnit.KilometerPerMinute);
        }

        /// <summary>
        ///     Get Speed from KilometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKilometersPerSecond(double kilometerspersecond)
#else
        public static Speed FromKilometersPerSecond(QuantityValue kilometerspersecond)
#endif
        {
            double value = (double) kilometerspersecond;
            return new Speed(value, SpeedUnit.KilometerPerSecond);
        }

        /// <summary>
        ///     Get Speed from Knots.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromKnots(double knots)
#else
        public static Speed FromKnots(QuantityValue knots)
#endif
        {
            double value = (double) knots;
            return new Speed(value, SpeedUnit.Knot);
        }

        /// <summary>
        ///     Get Speed from MetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerHour(double metersperhour)
#else
        public static Speed FromMetersPerHour(QuantityValue metersperhour)
#endif
        {
            double value = (double) metersperhour;
            return new Speed(value, SpeedUnit.MeterPerHour);
        }

        /// <summary>
        ///     Get Speed from MetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerMinutes(double metersperminutes)
#else
        public static Speed FromMetersPerMinutes(QuantityValue metersperminutes)
#endif
        {
            double value = (double) metersperminutes;
            return new Speed(value, SpeedUnit.MeterPerMinute);
        }

        /// <summary>
        ///     Get Speed from MetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMetersPerSecond(double meterspersecond)
#else
        public static Speed FromMetersPerSecond(QuantityValue meterspersecond)
#endif
        {
            double value = (double) meterspersecond;
            return new Speed(value, SpeedUnit.MeterPerSecond);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMicrometersPerMinutes(double micrometersperminutes)
#else
        public static Speed FromMicrometersPerMinutes(QuantityValue micrometersperminutes)
#endif
        {
            double value = (double) micrometersperminutes;
            return new Speed(value, SpeedUnit.MicrometerPerMinute);
        }

        /// <summary>
        ///     Get Speed from MicrometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMicrometersPerSecond(double micrometerspersecond)
#else
        public static Speed FromMicrometersPerSecond(QuantityValue micrometerspersecond)
#endif
        {
            double value = (double) micrometerspersecond;
            return new Speed(value, SpeedUnit.MicrometerPerSecond);
        }

        /// <summary>
        ///     Get Speed from MilesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMilesPerHour(double milesperhour)
#else
        public static Speed FromMilesPerHour(QuantityValue milesperhour)
#endif
        {
            double value = (double) milesperhour;
            return new Speed(value, SpeedUnit.MilePerHour);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerHour(double millimetersperhour)
#else
        public static Speed FromMillimetersPerHour(QuantityValue millimetersperhour)
#endif
        {
            double value = (double) millimetersperhour;
            return new Speed(value, SpeedUnit.MillimeterPerHour);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerMinutes(double millimetersperminutes)
#else
        public static Speed FromMillimetersPerMinutes(QuantityValue millimetersperminutes)
#endif
        {
            double value = (double) millimetersperminutes;
            return new Speed(value, SpeedUnit.MillimeterPerMinute);
        }

        /// <summary>
        ///     Get Speed from MillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromMillimetersPerSecond(double millimeterspersecond)
#else
        public static Speed FromMillimetersPerSecond(QuantityValue millimeterspersecond)
#endif
        {
            double value = (double) millimeterspersecond;
            return new Speed(value, SpeedUnit.MillimeterPerSecond);
        }

        /// <summary>
        ///     Get Speed from NanometersPerMinutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromNanometersPerMinutes(double nanometersperminutes)
#else
        public static Speed FromNanometersPerMinutes(QuantityValue nanometersperminutes)
#endif
        {
            double value = (double) nanometersperminutes;
            return new Speed(value, SpeedUnit.NanometerPerMinute);
        }

        /// <summary>
        ///     Get Speed from NanometersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromNanometersPerSecond(double nanometerspersecond)
#else
        public static Speed FromNanometersPerSecond(QuantityValue nanometerspersecond)
#endif
        {
            double value = (double) nanometerspersecond;
            return new Speed(value, SpeedUnit.NanometerPerSecond);
        }

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerHour(double ussurveyfeetperhour)
#else
        public static Speed FromUsSurveyFeetPerHour(QuantityValue ussurveyfeetperhour)
#endif
        {
            double value = (double) ussurveyfeetperhour;
            return new Speed(value, SpeedUnit.UsSurveyFootPerHour);
        }

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerMinute(double ussurveyfeetperminute)
#else
        public static Speed FromUsSurveyFeetPerMinute(QuantityValue ussurveyfeetperminute)
#endif
        {
            double value = (double) ussurveyfeetperminute;
            return new Speed(value, SpeedUnit.UsSurveyFootPerMinute);
        }

        /// <summary>
        ///     Get Speed from UsSurveyFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromUsSurveyFeetPerSecond(double ussurveyfeetpersecond)
#else
        public static Speed FromUsSurveyFeetPerSecond(QuantityValue ussurveyfeetpersecond)
#endif
        {
            double value = (double) ussurveyfeetpersecond;
            return new Speed(value, SpeedUnit.UsSurveyFootPerSecond);
        }

        /// <summary>
        ///     Get Speed from YardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerHour(double yardsperhour)
#else
        public static Speed FromYardsPerHour(QuantityValue yardsperhour)
#endif
        {
            double value = (double) yardsperhour;
            return new Speed(value, SpeedUnit.YardPerHour);
        }

        /// <summary>
        ///     Get Speed from YardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerMinute(double yardsperminute)
#else
        public static Speed FromYardsPerMinute(QuantityValue yardsperminute)
#endif
        {
            double value = (double) yardsperminute;
            return new Speed(value, SpeedUnit.YardPerMinute);
        }

        /// <summary>
        ///     Get Speed from YardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Speed FromYardsPerSecond(double yardspersecond)
#else
        public static Speed FromYardsPerSecond(QuantityValue yardspersecond)
#endif
        {
            double value = (double) yardspersecond;
            return new Speed(value, SpeedUnit.YardPerSecond);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Speed From(double value, SpeedUnit fromUnit)
#else
        public static Speed From(QuantityValue value, SpeedUnit fromUnit)
#endif
        {
            return new Speed((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(SpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        public IQuantity Add(IQuantity right)
        {
            if(!(right is Speed))
                throw new ArgumentException("The given quantity is not of type Speed.", nameof(right));

            return Add((Speed)right);
        }

        public IQuantity Subtract(IQuantity right)
        {
            if(!(right is Speed))
                throw new ArgumentException("The given quantity is not of type Speed.", nameof(right));

            return Subtract((Speed)right);
        }

        public Speed Add(Speed right)
        {
            return new Speed(Value + right.AsBaseNumericType(Unit), Unit);
        }

        public Speed Subtract(Speed right)
        {
            return new Speed(Value - right.AsBaseNumericType(Unit), Unit);
        }

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Speed)) throw new ArgumentException("Expected type Speed.", nameof(obj));

            return CompareTo((Speed)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Speed other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Speed within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Speed other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Speed.</returns>
        public override int GetHashCode()
        {
            return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpeedUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Speed to another Speed with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Speed with the specified unit.</returns>
        public Speed ToUnit(SpeedUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Speed(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case SpeedUnit.CentimeterPerHour: return (_value/3600) * 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (_value/60) * 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (_value) * 1e-2d;
                case SpeedUnit.DecimeterPerMinute: return (_value/60) * 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (_value) * 1e-1d;
                case SpeedUnit.FootPerHour: return _value*0.3048/3600;
                case SpeedUnit.FootPerMinute: return _value*0.3048/60;
                case SpeedUnit.FootPerSecond: return _value*0.3048;
                case SpeedUnit.InchPerHour: return (_value/3600)*2.54e-2;
                case SpeedUnit.InchPerMinute: return (_value/60)*2.54e-2;
                case SpeedUnit.InchPerSecond: return _value*2.54e-2;
                case SpeedUnit.KilometerPerHour: return (_value/3600) * 1e3d;
                case SpeedUnit.KilometerPerMinute: return (_value/60) * 1e3d;
                case SpeedUnit.KilometerPerSecond: return (_value) * 1e3d;
                case SpeedUnit.Knot: return _value*0.514444;
                case SpeedUnit.MeterPerHour: return _value/3600;
                case SpeedUnit.MeterPerMinute: return _value/60;
                case SpeedUnit.MeterPerSecond: return _value;
                case SpeedUnit.MicrometerPerMinute: return (_value/60) * 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (_value) * 1e-6d;
                case SpeedUnit.MilePerHour: return _value*0.44704;
                case SpeedUnit.MillimeterPerHour: return (_value/3600) * 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (_value/60) * 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (_value) * 1e-3d;
                case SpeedUnit.NanometerPerMinute: return (_value/60) * 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (_value) * 1e-9d;
                case SpeedUnit.UsSurveyFootPerHour: return (_value*1200/3937)/3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (_value*1200/3937)/60;
                case SpeedUnit.UsSurveyFootPerSecond: return _value*1200/3937;
                case SpeedUnit.YardPerHour: return _value*0.9144/3600;
                case SpeedUnit.YardPerMinute: return _value*0.9144/60;
                case SpeedUnit.YardPerSecond: return _value*0.9144;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(SpeedUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case SpeedUnit.CentimeterPerHour: return (baseUnitValue*3600) / 1e-2d;
                case SpeedUnit.CentimeterPerMinute: return (baseUnitValue*60) / 1e-2d;
                case SpeedUnit.CentimeterPerSecond: return (baseUnitValue) / 1e-2d;
                case SpeedUnit.DecimeterPerMinute: return (baseUnitValue*60) / 1e-1d;
                case SpeedUnit.DecimeterPerSecond: return (baseUnitValue) / 1e-1d;
                case SpeedUnit.FootPerHour: return baseUnitValue/0.3048*3600;
                case SpeedUnit.FootPerMinute: return baseUnitValue/0.3048*60;
                case SpeedUnit.FootPerSecond: return baseUnitValue/0.3048;
                case SpeedUnit.InchPerHour: return (baseUnitValue/2.54e-2)*3600;
                case SpeedUnit.InchPerMinute: return (baseUnitValue/2.54e-2)*60;
                case SpeedUnit.InchPerSecond: return baseUnitValue/2.54e-2;
                case SpeedUnit.KilometerPerHour: return (baseUnitValue*3600) / 1e3d;
                case SpeedUnit.KilometerPerMinute: return (baseUnitValue*60) / 1e3d;
                case SpeedUnit.KilometerPerSecond: return (baseUnitValue) / 1e3d;
                case SpeedUnit.Knot: return baseUnitValue/0.514444;
                case SpeedUnit.MeterPerHour: return baseUnitValue*3600;
                case SpeedUnit.MeterPerMinute: return baseUnitValue*60;
                case SpeedUnit.MeterPerSecond: return baseUnitValue;
                case SpeedUnit.MicrometerPerMinute: return (baseUnitValue*60) / 1e-6d;
                case SpeedUnit.MicrometerPerSecond: return (baseUnitValue) / 1e-6d;
                case SpeedUnit.MilePerHour: return baseUnitValue/0.44704;
                case SpeedUnit.MillimeterPerHour: return (baseUnitValue*3600) / 1e-3d;
                case SpeedUnit.MillimeterPerMinute: return (baseUnitValue*60) / 1e-3d;
                case SpeedUnit.MillimeterPerSecond: return (baseUnitValue) / 1e-3d;
                case SpeedUnit.NanometerPerMinute: return (baseUnitValue*60) / 1e-9d;
                case SpeedUnit.NanometerPerSecond: return (baseUnitValue) / 1e-9d;
                case SpeedUnit.UsSurveyFootPerHour: return (baseUnitValue*3937/1200)*3600;
                case SpeedUnit.UsSurveyFootPerMinute: return (baseUnitValue*3937/1200)*60;
                case SpeedUnit.UsSurveyFootPerSecond: return baseUnitValue*3937/1200;
                case SpeedUnit.YardPerHour: return baseUnitValue/0.9144*3600;
                case SpeedUnit.YardPerMinute: return baseUnitValue/0.9144*60;
                case SpeedUnit.YardPerSecond: return baseUnitValue/0.9144;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed Parse(string str)
        {
            return ParseInternal(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Speed result)
        {
            return TryParseInternal(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str)
        {
            return ParseUnitInternal(str, null);
        }

        public static bool TryParseUnit(string str, out SpeedUnit unit)
        {
            return TryParseUnitInternal(str, null, out unit);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        private static Speed ParseInternal(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Speed, SpeedUnit>(str, provider, ParseUnitInternal, From,
                (x, y) => From(x.MetersPerSecond + y.MetersPerSecond, BaseUnit));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseInternal([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Speed result)
        {
            result = default(Speed);

            if(string.IsNullOrWhiteSpace(str))
                return false;

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.TryParse<Speed, SpeedUnit>(str, provider, TryParseUnitInternal, From,
                (x, y) => From(x.MetersPerSecond + y.MetersPerSecond, BaseUnit), out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        private static SpeedUnit ParseUnitInternal(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<SpeedUnit>(str.Trim());

            if (unit == SpeedUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized SpeedUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseUnitInternal(string str, IFormatProvider provider, out SpeedUnit unit)
        {
            unit = SpeedUnit.Undefined;

            if(string.IsNullOrWhiteSpace(str))
                return false;

            var unitSystem = UnitSystem.GetCached(provider);
            if(!unitSystem.TryParse<SpeedUnit>(str.Trim(), out unit))
                return false;

            if(unit == SpeedUnit.Undefined)
                return false;

            return true;
        }

        #endregion

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(SpeedUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of Speed
        /// </summary>
        public static Speed MaxValue => new Speed(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Speed
        /// </summary>
        public static Speed MinValue => new Speed(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Speed.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Speed.BaseDimensions;
    }
}
