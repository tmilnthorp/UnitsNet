//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Pressure : IQuantity
#else
    public partial struct Pressure : IQuantity, IComparable, IComparable<Pressure>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PressureUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static Pressure()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        private
#else
        public
#endif
        Pressure(double numericValue, PressureUnit unit)
        {
            if(unit == PressureUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Pressure;

        /// <summary>
        ///     The base unit of Pressure, which is Pascal. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit => PressureUnit.Pascal;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the Pressure quantity.
        /// </summary>
        public static PressureUnit[] Units { get; } = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().Except(new PressureUnit[]{ PressureUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get Pressure in Atmospheres.
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Get Pressure in Bars.
        /// </summary>
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Get Pressure in Centibars.
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Get Pressure in Decapascals.
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Get Pressure in Decibars.
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Get Pressure in FeetOfHead.
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Get Pressure in Gigapascals.
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Get Pressure in Hectopascals.
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Get Pressure in InchesOfMercury.
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Get Pressure in Kilobars.
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Kilopascals.
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in Megabars.
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Get Pressure in MeganewtonsPerSquareMeter.
        /// </summary>
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in Megapascals.
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Get Pressure in MetersOfHead.
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Get Pressure in Micropascals.
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Get Pressure in Millibars.
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Get Pressure in MillimetersOfMercury.
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Pascals.
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Get Pressure in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Get Pressure in Torrs.
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        public static Pressure Zero => new Pressure(0, BaseUnit);

        /// <summary>
        ///     Get Pressure from Atmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAtmospheres(double atmospheres)
#else
        public static Pressure FromAtmospheres(QuantityValue atmospheres)
#endif
        {
            double value = (double) atmospheres;
            return new Pressure(value, PressureUnit.Atmosphere);
        }

        /// <summary>
        ///     Get Pressure from Bars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromBars(double bars)
#else
        public static Pressure FromBars(QuantityValue bars)
#endif
        {
            double value = (double) bars;
            return new Pressure(value, PressureUnit.Bar);
        }

        /// <summary>
        ///     Get Pressure from Centibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentibars(double centibars)
#else
        public static Pressure FromCentibars(QuantityValue centibars)
#endif
        {
            double value = (double) centibars;
            return new Pressure(value, PressureUnit.Centibar);
        }

        /// <summary>
        ///     Get Pressure from Decapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapascals(double decapascals)
#else
        public static Pressure FromDecapascals(QuantityValue decapascals)
#endif
        {
            double value = (double) decapascals;
            return new Pressure(value, PressureUnit.Decapascal);
        }

        /// <summary>
        ///     Get Pressure from Decibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecibars(double decibars)
#else
        public static Pressure FromDecibars(QuantityValue decibars)
#endif
        {
            double value = (double) decibars;
            return new Pressure(value, PressureUnit.Decibar);
        }

        /// <summary>
        ///     Get Pressure from FeetOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFeetOfHead(double feetofhead)
#else
        public static Pressure FromFeetOfHead(QuantityValue feetofhead)
#endif
        {
            double value = (double) feetofhead;
            return new Pressure(value, PressureUnit.FootOfHead);
        }

        /// <summary>
        ///     Get Pressure from Gigapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapascals(double gigapascals)
#else
        public static Pressure FromGigapascals(QuantityValue gigapascals)
#endif
        {
            double value = (double) gigapascals;
            return new Pressure(value, PressureUnit.Gigapascal);
        }

        /// <summary>
        ///     Get Pressure from Hectopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopascals(double hectopascals)
#else
        public static Pressure FromHectopascals(QuantityValue hectopascals)
#endif
        {
            double value = (double) hectopascals;
            return new Pressure(value, PressureUnit.Hectopascal);
        }

        /// <summary>
        ///     Get Pressure from InchesOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfMercury(double inchesofmercury)
#else
        public static Pressure FromInchesOfMercury(QuantityValue inchesofmercury)
#endif
        {
            double value = (double) inchesofmercury;
            return new Pressure(value, PressureUnit.InchOfMercury);
        }

        /// <summary>
        ///     Get Pressure from Kilobars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilobars(double kilobars)
#else
        public static Pressure FromKilobars(QuantityValue kilobars)
#endif
        {
            double value = (double) kilobars;
            return new Pressure(value, PressureUnit.Kilobar);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter)
#else
        public static Pressure FromKilogramsForcePerSquareCentimeter(QuantityValue kilogramsforcepersquarecentimeter)
#endif
        {
            double value = (double) kilogramsforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter)
#else
        public static Pressure FromKilogramsForcePerSquareMeter(QuantityValue kilogramsforcepersquaremeter)
#endif
        {
            double value = (double) kilogramsforcepersquaremeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter)
#else
        public static Pressure FromKilogramsForcePerSquareMillimeter(QuantityValue kilogramsforcepersquaremillimeter)
#endif
        {
            double value = (double) kilogramsforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter)
#else
        public static Pressure FromKilonewtonsPerSquareCentimeter(QuantityValue kilonewtonspersquarecentimeter)
#endif
        {
            double value = (double) kilonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter)
#else
        public static Pressure FromKilonewtonsPerSquareMeter(QuantityValue kilonewtonspersquaremeter)
#endif
        {
            double value = (double) kilonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter)
#else
        public static Pressure FromKilonewtonsPerSquareMillimeter(QuantityValue kilonewtonspersquaremillimeter)
#endif
        {
            double value = (double) kilonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Kilopascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopascals(double kilopascals)
#else
        public static Pressure FromKilopascals(QuantityValue kilopascals)
#endif
        {
            double value = (double) kilopascals;
            return new Pressure(value, PressureUnit.Kilopascal);
        }

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot)
#else
        public static Pressure FromKilopoundsForcePerSquareFoot(QuantityValue kilopoundsforcepersquarefoot)
#endif
        {
            double value = (double) kilopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch)
#else
        public static Pressure FromKilopoundsForcePerSquareInch(QuantityValue kilopoundsforcepersquareinch)
#endif
        {
            double value = (double) kilopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareInch);
        }

        /// <summary>
        ///     Get Pressure from Megabars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegabars(double megabars)
#else
        public static Pressure FromMegabars(QuantityValue megabars)
#endif
        {
            double value = (double) megabars;
            return new Pressure(value, PressureUnit.Megabar);
        }

        /// <summary>
        ///     Get Pressure from MeganewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMeganewtonsPerSquareMeter(double meganewtonspersquaremeter)
#else
        public static Pressure FromMeganewtonsPerSquareMeter(QuantityValue meganewtonspersquaremeter)
#endif
        {
            double value = (double) meganewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from Megapascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapascals(double megapascals)
#else
        public static Pressure FromMegapascals(QuantityValue megapascals)
#endif
        {
            double value = (double) megapascals;
            return new Pressure(value, PressureUnit.Megapascal);
        }

        /// <summary>
        ///     Get Pressure from MetersOfHead.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMetersOfHead(double metersofhead)
#else
        public static Pressure FromMetersOfHead(QuantityValue metersofhead)
#endif
        {
            double value = (double) metersofhead;
            return new Pressure(value, PressureUnit.MeterOfHead);
        }

        /// <summary>
        ///     Get Pressure from Micropascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropascals(double micropascals)
#else
        public static Pressure FromMicropascals(QuantityValue micropascals)
#endif
        {
            double value = (double) micropascals;
            return new Pressure(value, PressureUnit.Micropascal);
        }

        /// <summary>
        ///     Get Pressure from Millibars.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillibars(double millibars)
#else
        public static Pressure FromMillibars(QuantityValue millibars)
#endif
        {
            double value = (double) millibars;
            return new Pressure(value, PressureUnit.Millibar);
        }

        /// <summary>
        ///     Get Pressure from MillimetersOfMercury.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury)
#else
        public static Pressure FromMillimetersOfMercury(QuantityValue millimetersofmercury)
#endif
        {
            double value = (double) millimetersofmercury;
            return new Pressure(value, PressureUnit.MillimeterOfMercury);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter)
#else
        public static Pressure FromNewtonsPerSquareCentimeter(QuantityValue newtonspersquarecentimeter)
#endif
        {
            double value = (double) newtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter)
#else
        public static Pressure FromNewtonsPerSquareMeter(QuantityValue newtonspersquaremeter)
#endif
        {
            double value = (double) newtonspersquaremeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter)
#else
        public static Pressure FromNewtonsPerSquareMillimeter(QuantityValue newtonspersquaremillimeter)
#endif
        {
            double value = (double) newtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Pascals.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPascals(double pascals)
#else
        public static Pressure FromPascals(QuantityValue pascals)
#endif
        {
            double value = (double) pascals;
            return new Pressure(value, PressureUnit.Pascal);
        }

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot)
#else
        public static Pressure FromPoundsForcePerSquareFoot(QuantityValue poundsforcepersquarefoot)
#endif
        {
            double value = (double) poundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch)
#else
        public static Pressure FromPoundsForcePerSquareInch(QuantityValue poundsforcepersquareinch)
#endif
        {
            double value = (double) poundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PoundForcePerSquareInch);
        }

        /// <summary>
        ///     Get Pressure from TechnicalAtmospheres.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres)
#else
        public static Pressure FromTechnicalAtmospheres(QuantityValue technicalatmospheres)
#endif
        {
            double value = (double) technicalatmospheres;
            return new Pressure(value, PressureUnit.TechnicalAtmosphere);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter)
#else
        public static Pressure FromTonnesForcePerSquareCentimeter(QuantityValue tonnesforcepersquarecentimeter)
#endif
        {
            double value = (double) tonnesforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter)
#else
        public static Pressure FromTonnesForcePerSquareMeter(QuantityValue tonnesforcepersquaremeter)
#endif
        {
            double value = (double) tonnesforcepersquaremeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter)
#else
        public static Pressure FromTonnesForcePerSquareMillimeter(QuantityValue tonnesforcepersquaremillimeter)
#endif
        {
            double value = (double) tonnesforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Torrs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTorrs(double torrs)
#else
        public static Pressure FromTorrs(QuantityValue torrs)
#endif
        {
            double value = (double) torrs;
            return new Pressure(value, PressureUnit.Torr);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Pressure From(double value, PressureUnit fromUnit)
#else
        public static Pressure From(QuantityValue value, PressureUnit fromUnit)
#endif
        {
            return new Pressure((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        public IQuantity Add(IQuantity right)
        {
            if(!(right is Pressure))
                throw new ArgumentException("The given quantity is not of type Pressure.", nameof(right));

            return Add((Pressure)right);
        }

        public IQuantity Subtract(IQuantity right)
        {
            if(!(right is Pressure))
                throw new ArgumentException("The given quantity is not of type Pressure.", nameof(right));

            return Subtract((Pressure)right);
        }

        public Pressure Add(Pressure right)
        {
            return new Pressure(Value + right.AsBaseNumericType(Unit), Unit);
        }

        public Pressure Subtract(Pressure right)
        {
            return new Pressure(Value - right.AsBaseNumericType(Unit), Unit);
        }

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Pressure)) throw new ArgumentException("Expected type Pressure.", nameof(obj));

            return CompareTo((Pressure)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Pressure other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Pressure within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Pressure other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Pressure.</returns>
        public override int GetHashCode()
        {
            return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Pressure with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Pressure(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PressureUnit.Atmosphere: return _value*1.01325*1e5;
                case PressureUnit.Bar: return _value*1e5;
                case PressureUnit.Centibar: return (_value*1e5) * 1e-2d;
                case PressureUnit.Decapascal: return (_value) * 1e1d;
                case PressureUnit.Decibar: return (_value*1e5) * 1e-1d;
                case PressureUnit.FootOfHead: return _value*2989.0669;
                case PressureUnit.Gigapascal: return (_value) * 1e9d;
                case PressureUnit.Hectopascal: return (_value) * 1e2d;
                case PressureUnit.InchOfMercury: return _value/2.95299830714159e-4;
                case PressureUnit.Kilobar: return (_value*1e5) * 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return _value*9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return _value*9.80665019960652;
                case PressureUnit.KilogramForcePerSquareMillimeter: return _value*9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (_value*1e4) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (_value) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (_value*1e6) * 1e3d;
                case PressureUnit.Kilopascal: return (_value) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (_value*4.788025898033584e1) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (_value*6.894757293168361e3) * 1e3d;
                case PressureUnit.Megabar: return (_value*1e5) * 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (_value) * 1e6d;
                case PressureUnit.Megapascal: return (_value) * 1e6d;
                case PressureUnit.MeterOfHead: return _value*9804.139432;
                case PressureUnit.Micropascal: return (_value) * 1e-6d;
                case PressureUnit.Millibar: return (_value*1e5) * 1e-3d;
                case PressureUnit.MillimeterOfMercury: return _value/7.50061561302643e-3;
                case PressureUnit.NewtonPerSquareCentimeter: return _value*1e4;
                case PressureUnit.NewtonPerSquareMeter: return _value;
                case PressureUnit.NewtonPerSquareMillimeter: return _value*1e6;
                case PressureUnit.Pascal: return _value;
                case PressureUnit.PoundForcePerSquareFoot: return _value*4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return _value*6.894757293168361e3;
                case PressureUnit.TechnicalAtmosphere: return _value*9.80680592331*1e4;
                case PressureUnit.TonneForcePerSquareCentimeter: return _value*9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return _value*9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return _value*9.80665e9;
                case PressureUnit.Torr: return _value*1.3332266752*1e2;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PressureUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PressureUnit.Atmosphere: return baseUnitValue/(1.01325*1e5);
                case PressureUnit.Bar: return baseUnitValue/1e5;
                case PressureUnit.Centibar: return (baseUnitValue/1e5) / 1e-2d;
                case PressureUnit.Decapascal: return (baseUnitValue) / 1e1d;
                case PressureUnit.Decibar: return (baseUnitValue/1e5) / 1e-1d;
                case PressureUnit.FootOfHead: return baseUnitValue*0.000334552565551;
                case PressureUnit.Gigapascal: return (baseUnitValue) / 1e9d;
                case PressureUnit.Hectopascal: return (baseUnitValue) / 1e2d;
                case PressureUnit.InchOfMercury: return baseUnitValue*2.95299830714159e-4;
                case PressureUnit.Kilobar: return (baseUnitValue/1e5) / 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return baseUnitValue/9.80665e4;
                case PressureUnit.KilogramForcePerSquareMeter: return baseUnitValue*0.101971619222242;
                case PressureUnit.KilogramForcePerSquareMillimeter: return baseUnitValue/9.80665e6;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e3d;
                case PressureUnit.Kilopascal: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (baseUnitValue/4.788025898033584e1) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (baseUnitValue/6.894757293168361e3) / 1e3d;
                case PressureUnit.Megabar: return (baseUnitValue/1e5) / 1e6d;
                case PressureUnit.MeganewtonPerSquareMeter: return (baseUnitValue) / 1e6d;
                case PressureUnit.Megapascal: return (baseUnitValue) / 1e6d;
                case PressureUnit.MeterOfHead: return baseUnitValue*0.0001019977334;
                case PressureUnit.Micropascal: return (baseUnitValue) / 1e-6d;
                case PressureUnit.Millibar: return (baseUnitValue/1e5) / 1e-3d;
                case PressureUnit.MillimeterOfMercury: return baseUnitValue*7.50061561302643e-3;
                case PressureUnit.NewtonPerSquareCentimeter: return baseUnitValue/1e4;
                case PressureUnit.NewtonPerSquareMeter: return baseUnitValue;
                case PressureUnit.NewtonPerSquareMillimeter: return baseUnitValue/1e6;
                case PressureUnit.Pascal: return baseUnitValue;
                case PressureUnit.PoundForcePerSquareFoot: return baseUnitValue/4.788025898033584e1;
                case PressureUnit.PoundForcePerSquareInch: return baseUnitValue/6.894757293168361e3;
                case PressureUnit.TechnicalAtmosphere: return baseUnitValue/(9.80680592331*1e4);
                case PressureUnit.TonneForcePerSquareCentimeter: return baseUnitValue/9.80665e7;
                case PressureUnit.TonneForcePerSquareMeter: return baseUnitValue/9.80665e3;
                case PressureUnit.TonneForcePerSquareMillimeter: return baseUnitValue/9.80665e9;
                case PressureUnit.Torr: return baseUnitValue/(1.3332266752*1e2);
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(string str)
        {
            return ParseInternal(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Pressure result)
        {
            return TryParseInternal(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnitInternal(str, null);
        }

        public static bool TryParseUnit(string str, out PressureUnit unit)
        {
            return TryParseUnitInternal(str, null, out unit);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        private static Pressure ParseInternal(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Pressure, PressureUnit>(str, provider, ParseUnitInternal, From,
                (x, y) => From(x.Pascals + y.Pascals, BaseUnit));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseInternal([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Pressure result)
        {
            result = default(Pressure);

            if(string.IsNullOrWhiteSpace(str))
                return false;

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.TryParse<Pressure, PressureUnit>(str, provider, TryParseUnitInternal, From,
                (x, y) => From(x.Pascals + y.Pascals, BaseUnit), out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        private static PressureUnit ParseUnitInternal(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<PressureUnit>(str.Trim());

            if (unit == PressureUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized PressureUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseUnitInternal(string str, IFormatProvider provider, out PressureUnit unit)
        {
            unit = PressureUnit.Undefined;

            if(string.IsNullOrWhiteSpace(str))
                return false;

            var unitSystem = UnitSystem.GetCached(provider);
            if(!unitSystem.TryParse<PressureUnit>(str.Trim(), out unit))
                return false;

            if(unit == PressureUnit.Undefined)
                return false;

            return true;
        }

        #endregion

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(PressureUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of Pressure
        /// </summary>
        public static Pressure MaxValue => new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Pressure
        /// </summary>
        public static Pressure MinValue => new Pressure(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Pressure.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Pressure.BaseDimensions;
    }
}
