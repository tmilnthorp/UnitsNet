//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The amount of power in a volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class PowerDensity : IQuantity
#else
    public partial struct PowerDensity : IQuantity, IComparable, IComparable<PowerDensity>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PowerDensityUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PowerDensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static PowerDensity()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -3, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        private
#else
        public
#endif
        PowerDensity(double numericValue, PowerDensityUnit unit)
        {
            if(unit == PowerDensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.PowerDensity;

        /// <summary>
        ///     The base unit of PowerDensity, which is WattPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static PowerDensityUnit BaseUnit => PowerDensityUnit.WattPerCubicMeter;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the PowerDensity quantity.
        /// </summary>
        public static PowerDensityUnit[] Units { get; } = Enum.GetValues(typeof(PowerDensityUnit)).Cast<PowerDensityUnit>().Except(new PowerDensityUnit[]{ PowerDensityUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicFoot.
        /// </summary>
        public double DecawattsPerCubicFoot => As(PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicInch.
        /// </summary>
        public double DecawattsPerCubicInch => As(PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerCubicMeter.
        /// </summary>
        public double DecawattsPerCubicMeter => As(PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DecawattsPerLiter.
        /// </summary>
        public double DecawattsPerLiter => As(PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicFoot.
        /// </summary>
        public double DeciwattsPerCubicFoot => As(PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicInch.
        /// </summary>
        public double DeciwattsPerCubicInch => As(PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerCubicMeter.
        /// </summary>
        public double DeciwattsPerCubicMeter => As(PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in DeciwattsPerLiter.
        /// </summary>
        public double DeciwattsPerLiter => As(PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicFoot.
        /// </summary>
        public double GigawattsPerCubicFoot => As(PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicInch.
        /// </summary>
        public double GigawattsPerCubicInch => As(PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerCubicMeter.
        /// </summary>
        public double GigawattsPerCubicMeter => As(PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in GigawattsPerLiter.
        /// </summary>
        public double GigawattsPerLiter => As(PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicFoot.
        /// </summary>
        public double KilowattsPerCubicFoot => As(PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicInch.
        /// </summary>
        public double KilowattsPerCubicInch => As(PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerCubicMeter.
        /// </summary>
        public double KilowattsPerCubicMeter => As(PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in KilowattsPerLiter.
        /// </summary>
        public double KilowattsPerLiter => As(PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicFoot.
        /// </summary>
        public double MegawattsPerCubicFoot => As(PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicInch.
        /// </summary>
        public double MegawattsPerCubicInch => As(PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerCubicMeter.
        /// </summary>
        public double MegawattsPerCubicMeter => As(PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MegawattsPerLiter.
        /// </summary>
        public double MegawattsPerLiter => As(PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicFoot.
        /// </summary>
        public double MicrowattsPerCubicFoot => As(PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicInch.
        /// </summary>
        public double MicrowattsPerCubicInch => As(PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerCubicMeter.
        /// </summary>
        public double MicrowattsPerCubicMeter => As(PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MicrowattsPerLiter.
        /// </summary>
        public double MicrowattsPerLiter => As(PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicFoot.
        /// </summary>
        public double MilliwattsPerCubicFoot => As(PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicInch.
        /// </summary>
        public double MilliwattsPerCubicInch => As(PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerCubicMeter.
        /// </summary>
        public double MilliwattsPerCubicMeter => As(PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in MilliwattsPerLiter.
        /// </summary>
        public double MilliwattsPerLiter => As(PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicFoot.
        /// </summary>
        public double NanowattsPerCubicFoot => As(PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicInch.
        /// </summary>
        public double NanowattsPerCubicInch => As(PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerCubicMeter.
        /// </summary>
        public double NanowattsPerCubicMeter => As(PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in NanowattsPerLiter.
        /// </summary>
        public double NanowattsPerLiter => As(PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicFoot.
        /// </summary>
        public double PicowattsPerCubicFoot => As(PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicInch.
        /// </summary>
        public double PicowattsPerCubicInch => As(PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerCubicMeter.
        /// </summary>
        public double PicowattsPerCubicMeter => As(PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in PicowattsPerLiter.
        /// </summary>
        public double PicowattsPerLiter => As(PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicFoot.
        /// </summary>
        public double TerawattsPerCubicFoot => As(PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicInch.
        /// </summary>
        public double TerawattsPerCubicInch => As(PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerCubicMeter.
        /// </summary>
        public double TerawattsPerCubicMeter => As(PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in TerawattsPerLiter.
        /// </summary>
        public double TerawattsPerLiter => As(PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicFoot.
        /// </summary>
        public double WattsPerCubicFoot => As(PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicInch.
        /// </summary>
        public double WattsPerCubicInch => As(PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Get PowerDensity in WattsPerCubicMeter.
        /// </summary>
        public double WattsPerCubicMeter => As(PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Get PowerDensity in WattsPerLiter.
        /// </summary>
        public double WattsPerLiter => As(PowerDensityUnit.WattPerLiter);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit WattPerCubicMeter.
        /// </summary>
        public static PowerDensity Zero => new PowerDensity(0, BaseUnit);

        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicFoot(double decawattspercubicfoot)
#else
        public static PowerDensity FromDecawattsPerCubicFoot(QuantityValue decawattspercubicfoot)
#endif
        {
            double value = (double) decawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicInch(double decawattspercubicinch)
#else
        public static PowerDensity FromDecawattsPerCubicInch(QuantityValue decawattspercubicinch)
#endif
        {
            double value = (double) decawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from DecawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerCubicMeter(double decawattspercubicmeter)
#else
        public static PowerDensity FromDecawattsPerCubicMeter(QuantityValue decawattspercubicmeter)
#endif
        {
            double value = (double) decawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from DecawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDecawattsPerLiter(double decawattsperliter)
#else
        public static PowerDensity FromDecawattsPerLiter(QuantityValue decawattsperliter)
#endif
        {
            double value = (double) decawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DecawattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicFoot(double deciwattspercubicfoot)
#else
        public static PowerDensity FromDeciwattsPerCubicFoot(QuantityValue deciwattspercubicfoot)
#endif
        {
            double value = (double) deciwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicInch(double deciwattspercubicinch)
#else
        public static PowerDensity FromDeciwattsPerCubicInch(QuantityValue deciwattspercubicinch)
#endif
        {
            double value = (double) deciwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from DeciwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerCubicMeter(double deciwattspercubicmeter)
#else
        public static PowerDensity FromDeciwattsPerCubicMeter(QuantityValue deciwattspercubicmeter)
#endif
        {
            double value = (double) deciwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from DeciwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromDeciwattsPerLiter(double deciwattsperliter)
#else
        public static PowerDensity FromDeciwattsPerLiter(QuantityValue deciwattsperliter)
#endif
        {
            double value = (double) deciwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.DeciwattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicFoot(double gigawattspercubicfoot)
#else
        public static PowerDensity FromGigawattsPerCubicFoot(QuantityValue gigawattspercubicfoot)
#endif
        {
            double value = (double) gigawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicInch(double gigawattspercubicinch)
#else
        public static PowerDensity FromGigawattsPerCubicInch(QuantityValue gigawattspercubicinch)
#endif
        {
            double value = (double) gigawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from GigawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerCubicMeter(double gigawattspercubicmeter)
#else
        public static PowerDensity FromGigawattsPerCubicMeter(QuantityValue gigawattspercubicmeter)
#endif
        {
            double value = (double) gigawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from GigawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromGigawattsPerLiter(double gigawattsperliter)
#else
        public static PowerDensity FromGigawattsPerLiter(QuantityValue gigawattsperliter)
#endif
        {
            double value = (double) gigawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.GigawattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicFoot(double kilowattspercubicfoot)
#else
        public static PowerDensity FromKilowattsPerCubicFoot(QuantityValue kilowattspercubicfoot)
#endif
        {
            double value = (double) kilowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicInch(double kilowattspercubicinch)
#else
        public static PowerDensity FromKilowattsPerCubicInch(QuantityValue kilowattspercubicinch)
#endif
        {
            double value = (double) kilowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from KilowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerCubicMeter(double kilowattspercubicmeter)
#else
        public static PowerDensity FromKilowattsPerCubicMeter(QuantityValue kilowattspercubicmeter)
#endif
        {
            double value = (double) kilowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from KilowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromKilowattsPerLiter(double kilowattsperliter)
#else
        public static PowerDensity FromKilowattsPerLiter(QuantityValue kilowattsperliter)
#endif
        {
            double value = (double) kilowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.KilowattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicFoot(double megawattspercubicfoot)
#else
        public static PowerDensity FromMegawattsPerCubicFoot(QuantityValue megawattspercubicfoot)
#endif
        {
            double value = (double) megawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicInch(double megawattspercubicinch)
#else
        public static PowerDensity FromMegawattsPerCubicInch(QuantityValue megawattspercubicinch)
#endif
        {
            double value = (double) megawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from MegawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerCubicMeter(double megawattspercubicmeter)
#else
        public static PowerDensity FromMegawattsPerCubicMeter(QuantityValue megawattspercubicmeter)
#endif
        {
            double value = (double) megawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from MegawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMegawattsPerLiter(double megawattsperliter)
#else
        public static PowerDensity FromMegawattsPerLiter(QuantityValue megawattsperliter)
#endif
        {
            double value = (double) megawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MegawattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicFoot(double microwattspercubicfoot)
#else
        public static PowerDensity FromMicrowattsPerCubicFoot(QuantityValue microwattspercubicfoot)
#endif
        {
            double value = (double) microwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicInch(double microwattspercubicinch)
#else
        public static PowerDensity FromMicrowattsPerCubicInch(QuantityValue microwattspercubicinch)
#endif
        {
            double value = (double) microwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from MicrowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerCubicMeter(double microwattspercubicmeter)
#else
        public static PowerDensity FromMicrowattsPerCubicMeter(QuantityValue microwattspercubicmeter)
#endif
        {
            double value = (double) microwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from MicrowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMicrowattsPerLiter(double microwattsperliter)
#else
        public static PowerDensity FromMicrowattsPerLiter(QuantityValue microwattsperliter)
#endif
        {
            double value = (double) microwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MicrowattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicFoot(double milliwattspercubicfoot)
#else
        public static PowerDensity FromMilliwattsPerCubicFoot(QuantityValue milliwattspercubicfoot)
#endif
        {
            double value = (double) milliwattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicInch(double milliwattspercubicinch)
#else
        public static PowerDensity FromMilliwattsPerCubicInch(QuantityValue milliwattspercubicinch)
#endif
        {
            double value = (double) milliwattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from MilliwattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerCubicMeter(double milliwattspercubicmeter)
#else
        public static PowerDensity FromMilliwattsPerCubicMeter(QuantityValue milliwattspercubicmeter)
#endif
        {
            double value = (double) milliwattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from MilliwattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromMilliwattsPerLiter(double milliwattsperliter)
#else
        public static PowerDensity FromMilliwattsPerLiter(QuantityValue milliwattsperliter)
#endif
        {
            double value = (double) milliwattsperliter;
            return new PowerDensity(value, PowerDensityUnit.MilliwattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicFoot(double nanowattspercubicfoot)
#else
        public static PowerDensity FromNanowattsPerCubicFoot(QuantityValue nanowattspercubicfoot)
#endif
        {
            double value = (double) nanowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicInch(double nanowattspercubicinch)
#else
        public static PowerDensity FromNanowattsPerCubicInch(QuantityValue nanowattspercubicinch)
#endif
        {
            double value = (double) nanowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from NanowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerCubicMeter(double nanowattspercubicmeter)
#else
        public static PowerDensity FromNanowattsPerCubicMeter(QuantityValue nanowattspercubicmeter)
#endif
        {
            double value = (double) nanowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from NanowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromNanowattsPerLiter(double nanowattsperliter)
#else
        public static PowerDensity FromNanowattsPerLiter(QuantityValue nanowattsperliter)
#endif
        {
            double value = (double) nanowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.NanowattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicFoot(double picowattspercubicfoot)
#else
        public static PowerDensity FromPicowattsPerCubicFoot(QuantityValue picowattspercubicfoot)
#endif
        {
            double value = (double) picowattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicInch(double picowattspercubicinch)
#else
        public static PowerDensity FromPicowattsPerCubicInch(QuantityValue picowattspercubicinch)
#endif
        {
            double value = (double) picowattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from PicowattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerCubicMeter(double picowattspercubicmeter)
#else
        public static PowerDensity FromPicowattsPerCubicMeter(QuantityValue picowattspercubicmeter)
#endif
        {
            double value = (double) picowattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from PicowattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromPicowattsPerLiter(double picowattsperliter)
#else
        public static PowerDensity FromPicowattsPerLiter(QuantityValue picowattsperliter)
#endif
        {
            double value = (double) picowattsperliter;
            return new PowerDensity(value, PowerDensityUnit.PicowattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicFoot(double terawattspercubicfoot)
#else
        public static PowerDensity FromTerawattsPerCubicFoot(QuantityValue terawattspercubicfoot)
#endif
        {
            double value = (double) terawattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicInch(double terawattspercubicinch)
#else
        public static PowerDensity FromTerawattsPerCubicInch(QuantityValue terawattspercubicinch)
#endif
        {
            double value = (double) terawattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from TerawattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerCubicMeter(double terawattspercubicmeter)
#else
        public static PowerDensity FromTerawattsPerCubicMeter(QuantityValue terawattspercubicmeter)
#endif
        {
            double value = (double) terawattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from TerawattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromTerawattsPerLiter(double terawattsperliter)
#else
        public static PowerDensity FromTerawattsPerLiter(QuantityValue terawattsperliter)
#endif
        {
            double value = (double) terawattsperliter;
            return new PowerDensity(value, PowerDensityUnit.TerawattPerLiter);
        }

        /// <summary>
        ///     Get PowerDensity from WattsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicFoot(double wattspercubicfoot)
#else
        public static PowerDensity FromWattsPerCubicFoot(QuantityValue wattspercubicfoot)
#endif
        {
            double value = (double) wattspercubicfoot;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicFoot);
        }

        /// <summary>
        ///     Get PowerDensity from WattsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicInch(double wattspercubicinch)
#else
        public static PowerDensity FromWattsPerCubicInch(QuantityValue wattspercubicinch)
#endif
        {
            double value = (double) wattspercubicinch;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicInch);
        }

        /// <summary>
        ///     Get PowerDensity from WattsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerCubicMeter(double wattspercubicmeter)
#else
        public static PowerDensity FromWattsPerCubicMeter(QuantityValue wattspercubicmeter)
#endif
        {
            double value = (double) wattspercubicmeter;
            return new PowerDensity(value, PowerDensityUnit.WattPerCubicMeter);
        }

        /// <summary>
        ///     Get PowerDensity from WattsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PowerDensity FromWattsPerLiter(double wattsperliter)
#else
        public static PowerDensity FromWattsPerLiter(QuantityValue wattsperliter)
#endif
        {
            double value = (double) wattsperliter;
            return new PowerDensity(value, PowerDensityUnit.WattPerLiter);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerDensityUnit" /> to <see cref="PowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PowerDensity unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static PowerDensity From(double value, PowerDensityUnit fromUnit)
#else
        public static PowerDensity From(QuantityValue value, PowerDensityUnit fromUnit)
#endif
        {
            return new PowerDensity((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(PowerDensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        public IQuantity Add(IQuantity right)
        {
            if(!(right is PowerDensity))
                throw new ArgumentException("The given quantity is not of type PowerDensity.", nameof(right));

            return Add((PowerDensity)right);
        }

        public IQuantity Subtract(IQuantity right)
        {
            if(!(right is PowerDensity))
                throw new ArgumentException("The given quantity is not of type PowerDensity.", nameof(right));

            return Subtract((PowerDensity)right);
        }

        public PowerDensity Add(PowerDensity right)
        {
            return new PowerDensity(Value + right.AsBaseNumericType(Unit), Unit);
        }

        public PowerDensity Subtract(PowerDensity right)
        {
            return new PowerDensity(Value - right.AsBaseNumericType(Unit), Unit);
        }

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PowerDensity)) throw new ArgumentException("Expected type PowerDensity.", nameof(obj));

            return CompareTo((PowerDensity)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(PowerDensity other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PowerDensity within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PowerDensity other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PowerDensity.</returns>
        public override int GetHashCode()
        {
            return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerDensityUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this PowerDensity to another PowerDensity with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A PowerDensity with the specified unit.</returns>
        public PowerDensity ToUnit(PowerDensityUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new PowerDensity(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PowerDensityUnit.DecawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e1d;
                case PowerDensityUnit.DecawattPerCubicInch: return (_value*6.102374409473228e4) * 1e1d;
                case PowerDensityUnit.DecawattPerCubicMeter: return (_value) * 1e1d;
                case PowerDensityUnit.DecawattPerLiter: return (_value*1.0e3) * 1e1d;
                case PowerDensityUnit.DeciwattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicInch: return (_value*6.102374409473228e4) * 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicMeter: return (_value) * 1e-1d;
                case PowerDensityUnit.DeciwattPerLiter: return (_value*1.0e3) * 1e-1d;
                case PowerDensityUnit.GigawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e9d;
                case PowerDensityUnit.GigawattPerCubicInch: return (_value*6.102374409473228e4) * 1e9d;
                case PowerDensityUnit.GigawattPerCubicMeter: return (_value) * 1e9d;
                case PowerDensityUnit.GigawattPerLiter: return (_value*1.0e3) * 1e9d;
                case PowerDensityUnit.KilowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e3d;
                case PowerDensityUnit.KilowattPerCubicInch: return (_value*6.102374409473228e4) * 1e3d;
                case PowerDensityUnit.KilowattPerCubicMeter: return (_value) * 1e3d;
                case PowerDensityUnit.KilowattPerLiter: return (_value*1.0e3) * 1e3d;
                case PowerDensityUnit.MegawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e6d;
                case PowerDensityUnit.MegawattPerCubicInch: return (_value*6.102374409473228e4) * 1e6d;
                case PowerDensityUnit.MegawattPerCubicMeter: return (_value) * 1e6d;
                case PowerDensityUnit.MegawattPerLiter: return (_value*1.0e3) * 1e6d;
                case PowerDensityUnit.MicrowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicMeter: return (_value) * 1e-6d;
                case PowerDensityUnit.MicrowattPerLiter: return (_value*1.0e3) * 1e-6d;
                case PowerDensityUnit.MilliwattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicInch: return (_value*6.102374409473228e4) * 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicMeter: return (_value) * 1e-3d;
                case PowerDensityUnit.MilliwattPerLiter: return (_value*1.0e3) * 1e-3d;
                case PowerDensityUnit.NanowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-9d;
                case PowerDensityUnit.NanowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-9d;
                case PowerDensityUnit.NanowattPerCubicMeter: return (_value) * 1e-9d;
                case PowerDensityUnit.NanowattPerLiter: return (_value*1.0e3) * 1e-9d;
                case PowerDensityUnit.PicowattPerCubicFoot: return (_value*3.531466672148859e1) * 1e-12d;
                case PowerDensityUnit.PicowattPerCubicInch: return (_value*6.102374409473228e4) * 1e-12d;
                case PowerDensityUnit.PicowattPerCubicMeter: return (_value) * 1e-12d;
                case PowerDensityUnit.PicowattPerLiter: return (_value*1.0e3) * 1e-12d;
                case PowerDensityUnit.TerawattPerCubicFoot: return (_value*3.531466672148859e1) * 1e12d;
                case PowerDensityUnit.TerawattPerCubicInch: return (_value*6.102374409473228e4) * 1e12d;
                case PowerDensityUnit.TerawattPerCubicMeter: return (_value) * 1e12d;
                case PowerDensityUnit.TerawattPerLiter: return (_value*1.0e3) * 1e12d;
                case PowerDensityUnit.WattPerCubicFoot: return _value*3.531466672148859e1;
                case PowerDensityUnit.WattPerCubicInch: return _value*6.102374409473228e4;
                case PowerDensityUnit.WattPerCubicMeter: return _value;
                case PowerDensityUnit.WattPerLiter: return _value*1.0e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PowerDensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PowerDensityUnit.DecawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e1d;
                case PowerDensityUnit.DecawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e1d;
                case PowerDensityUnit.DecawattPerCubicMeter: return (baseUnitValue) / 1e1d;
                case PowerDensityUnit.DecawattPerLiter: return (baseUnitValue/1.0e3) / 1e1d;
                case PowerDensityUnit.DeciwattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-1d;
                case PowerDensityUnit.DeciwattPerCubicMeter: return (baseUnitValue) / 1e-1d;
                case PowerDensityUnit.DeciwattPerLiter: return (baseUnitValue/1.0e3) / 1e-1d;
                case PowerDensityUnit.GigawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e9d;
                case PowerDensityUnit.GigawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e9d;
                case PowerDensityUnit.GigawattPerCubicMeter: return (baseUnitValue) / 1e9d;
                case PowerDensityUnit.GigawattPerLiter: return (baseUnitValue/1.0e3) / 1e9d;
                case PowerDensityUnit.KilowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e3d;
                case PowerDensityUnit.KilowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e3d;
                case PowerDensityUnit.KilowattPerCubicMeter: return (baseUnitValue) / 1e3d;
                case PowerDensityUnit.KilowattPerLiter: return (baseUnitValue/1.0e3) / 1e3d;
                case PowerDensityUnit.MegawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e6d;
                case PowerDensityUnit.MegawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e6d;
                case PowerDensityUnit.MegawattPerCubicMeter: return (baseUnitValue) / 1e6d;
                case PowerDensityUnit.MegawattPerLiter: return (baseUnitValue/1.0e3) / 1e6d;
                case PowerDensityUnit.MicrowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-6d;
                case PowerDensityUnit.MicrowattPerCubicMeter: return (baseUnitValue) / 1e-6d;
                case PowerDensityUnit.MicrowattPerLiter: return (baseUnitValue/1.0e3) / 1e-6d;
                case PowerDensityUnit.MilliwattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-3d;
                case PowerDensityUnit.MilliwattPerCubicMeter: return (baseUnitValue) / 1e-3d;
                case PowerDensityUnit.MilliwattPerLiter: return (baseUnitValue/1.0e3) / 1e-3d;
                case PowerDensityUnit.NanowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-9d;
                case PowerDensityUnit.NanowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-9d;
                case PowerDensityUnit.NanowattPerCubicMeter: return (baseUnitValue) / 1e-9d;
                case PowerDensityUnit.NanowattPerLiter: return (baseUnitValue/1.0e3) / 1e-9d;
                case PowerDensityUnit.PicowattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e-12d;
                case PowerDensityUnit.PicowattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e-12d;
                case PowerDensityUnit.PicowattPerCubicMeter: return (baseUnitValue) / 1e-12d;
                case PowerDensityUnit.PicowattPerLiter: return (baseUnitValue/1.0e3) / 1e-12d;
                case PowerDensityUnit.TerawattPerCubicFoot: return (baseUnitValue/3.531466672148859e1) / 1e12d;
                case PowerDensityUnit.TerawattPerCubicInch: return (baseUnitValue/6.102374409473228e4) / 1e12d;
                case PowerDensityUnit.TerawattPerCubicMeter: return (baseUnitValue) / 1e12d;
                case PowerDensityUnit.TerawattPerLiter: return (baseUnitValue/1.0e3) / 1e12d;
                case PowerDensityUnit.WattPerCubicFoot: return baseUnitValue/3.531466672148859e1;
                case PowerDensityUnit.WattPerCubicInch: return baseUnitValue/6.102374409473228e4;
                case PowerDensityUnit.WattPerCubicMeter: return baseUnitValue;
                case PowerDensityUnit.WattPerLiter: return baseUnitValue/1.0e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PowerDensity Parse(string str)
        {
            return ParseInternal(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out PowerDensity result)
        {
            return TryParseInternal(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerDensityUnit ParseUnit(string str)
        {
            return ParseUnitInternal(str, null);
        }

        public static bool TryParseUnit(string str, out PowerDensityUnit unit)
        {
            return TryParseUnitInternal(str, null, out unit);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        private static PowerDensity ParseInternal(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<PowerDensity, PowerDensityUnit>(str, provider, ParseUnitInternal, From,
                (x, y) => From(x.WattsPerCubicMeter + y.WattsPerCubicMeter, BaseUnit));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseInternal([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out PowerDensity result)
        {
            result = default(PowerDensity);

            if(string.IsNullOrWhiteSpace(str))
                return false;

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.TryParse<PowerDensity, PowerDensityUnit>(str, provider, TryParseUnitInternal, From,
                (x, y) => From(x.WattsPerCubicMeter + y.WattsPerCubicMeter, BaseUnit), out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        private static PowerDensityUnit ParseUnitInternal(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<PowerDensityUnit>(str.Trim());

            if (unit == PowerDensityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized PowerDensityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseUnitInternal(string str, IFormatProvider provider, out PowerDensityUnit unit)
        {
            unit = PowerDensityUnit.Undefined;

            if(string.IsNullOrWhiteSpace(str))
                return false;

            var unitSystem = UnitSystem.GetCached(provider);
            if(!unitSystem.TryParse<PowerDensityUnit>(str.Trim(), out unit))
                return false;

            if(unit == PowerDensityUnit.Undefined)
                return false;

            return true;
        }

        #endregion

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(PowerDensityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of PowerDensity
        /// </summary>
        public static PowerDensity MaxValue => new PowerDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of PowerDensity
        /// </summary>
        public static PowerDensity MinValue => new PowerDensity(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => PowerDensity.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PowerDensity.BaseDimensions;
    }
}
