//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Volume : IQuantity
#else
    public partial struct Volume : IQuantity, IComparable, IComparable<Volume>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static Volume()
        {
            BaseDimensions = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        private
#else
        public
#endif
        Volume(double numericValue, VolumeUnit unit)
        {
            if(unit == VolumeUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Volume;

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit => VolumeUnit.CubicMeter;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; } = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().Except(new VolumeUnit[]{ VolumeUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get Volume in AuTablespoons.
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Get Volume in Centiliters.
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Get Volume in CubicCentimeters.
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Get Volume in CubicDecimeters.
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Get Volume in CubicFeet.
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Get Volume in CubicInches.
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Get Volume in CubicKilometers.
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Get Volume in CubicMeters.
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Get Volume in CubicMicrometers.
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Get Volume in CubicMiles.
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Get Volume in CubicMillimeters.
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Get Volume in CubicYards.
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Get Volume in Deciliters.
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Get Volume in HectocubicFeet.
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Get Volume in HectocubicMeters.
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Get Volume in Hectoliters.
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Get Volume in ImperialBeerBarrels.
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Get Volume in ImperialGallons.
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Get Volume in ImperialOunces.
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Get Volume in KilocubicFeet.
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Get Volume in KilocubicMeters.
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Get Volume in KiloimperialGallons.
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Get Volume in KilousGallons.
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Get Volume in Liters.
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Get Volume in MegacubicFeet.
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Get Volume in MegaimperialGallons.
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Get Volume in MegausGallons.
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Get Volume in MetricCups.
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Get Volume in MetricTeaspoons.
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Get Volume in Microliters.
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Get Volume in Milliliters.
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Get Volume in OilBarrels.
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Get Volume in UkTablespoons.
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Get Volume in UsBeerBarrels.
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Get Volume in UsCustomaryCups.
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Get Volume in UsGallons.
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Get Volume in UsLegalCups.
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Get Volume in UsOunces.
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Get Volume in UsPints.
        /// </summary>
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Get Volume in UsQuarts.
        /// </summary>
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Get Volume in UsTablespoons.
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Get Volume in UsTeaspoons.
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero => new Volume(0, BaseUnit);

        /// <summary>
        ///     Get Volume from AuTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAuTablespoons(double autablespoons)
#else
        public static Volume FromAuTablespoons(QuantityValue autablespoons)
#endif
        {
            double value = (double) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }

        /// <summary>
        ///     Get Volume from Centiliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCentiliters(double centiliters)
#else
        public static Volume FromCentiliters(QuantityValue centiliters)
#endif
        {
            double value = (double) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }

        /// <summary>
        ///     Get Volume from CubicCentimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicCentimeters(double cubiccentimeters)
#else
        public static Volume FromCubicCentimeters(QuantityValue cubiccentimeters)
#endif
        {
            double value = (double) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }

        /// <summary>
        ///     Get Volume from CubicDecimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicDecimeters(double cubicdecimeters)
#else
        public static Volume FromCubicDecimeters(QuantityValue cubicdecimeters)
#endif
        {
            double value = (double) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }

        /// <summary>
        ///     Get Volume from CubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicFeet(double cubicfeet)
#else
        public static Volume FromCubicFeet(QuantityValue cubicfeet)
#endif
        {
            double value = (double) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }

        /// <summary>
        ///     Get Volume from CubicInches.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicInches(double cubicinches)
#else
        public static Volume FromCubicInches(QuantityValue cubicinches)
#endif
        {
            double value = (double) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }

        /// <summary>
        ///     Get Volume from CubicKilometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicKilometers(double cubickilometers)
#else
        public static Volume FromCubicKilometers(QuantityValue cubickilometers)
#endif
        {
            double value = (double) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }

        /// <summary>
        ///     Get Volume from CubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMeters(double cubicmeters)
#else
        public static Volume FromCubicMeters(QuantityValue cubicmeters)
#endif
        {
            double value = (double) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }

        /// <summary>
        ///     Get Volume from CubicMicrometers.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMicrometers(double cubicmicrometers)
#else
        public static Volume FromCubicMicrometers(QuantityValue cubicmicrometers)
#endif
        {
            double value = (double) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }

        /// <summary>
        ///     Get Volume from CubicMiles.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMiles(double cubicmiles)
#else
        public static Volume FromCubicMiles(QuantityValue cubicmiles)
#endif
        {
            double value = (double) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }

        /// <summary>
        ///     Get Volume from CubicMillimeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMillimeters(double cubicmillimeters)
#else
        public static Volume FromCubicMillimeters(QuantityValue cubicmillimeters)
#endif
        {
            double value = (double) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }

        /// <summary>
        ///     Get Volume from CubicYards.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicYards(double cubicyards)
#else
        public static Volume FromCubicYards(QuantityValue cubicyards)
#endif
        {
            double value = (double) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }

        /// <summary>
        ///     Get Volume from Deciliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciliters(double deciliters)
#else
        public static Volume FromDeciliters(QuantityValue deciliters)
#endif
        {
            double value = (double) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }

        /// <summary>
        ///     Get Volume from HectocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicFeet(double hectocubicfeet)
#else
        public static Volume FromHectocubicFeet(QuantityValue hectocubicfeet)
#endif
        {
            double value = (double) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }

        /// <summary>
        ///     Get Volume from HectocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicMeters(double hectocubicmeters)
#else
        public static Volume FromHectocubicMeters(QuantityValue hectocubicmeters)
#endif
        {
            double value = (double) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }

        /// <summary>
        ///     Get Volume from Hectoliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectoliters(double hectoliters)
#else
        public static Volume FromHectoliters(QuantityValue hectoliters)
#endif
        {
            double value = (double) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }

        /// <summary>
        ///     Get Volume from ImperialBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels)
#else
        public static Volume FromImperialBeerBarrels(QuantityValue imperialbeerbarrels)
#endif
        {
            double value = (double) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }

        /// <summary>
        ///     Get Volume from ImperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialGallons(double imperialgallons)
#else
        public static Volume FromImperialGallons(QuantityValue imperialgallons)
#endif
        {
            double value = (double) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }

        /// <summary>
        ///     Get Volume from ImperialOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialOunces(double imperialounces)
#else
        public static Volume FromImperialOunces(QuantityValue imperialounces)
#endif
        {
            double value = (double) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }

        /// <summary>
        ///     Get Volume from KilocubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicFeet(double kilocubicfeet)
#else
        public static Volume FromKilocubicFeet(QuantityValue kilocubicfeet)
#endif
        {
            double value = (double) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }

        /// <summary>
        ///     Get Volume from KilocubicMeters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicMeters(double kilocubicmeters)
#else
        public static Volume FromKilocubicMeters(QuantityValue kilocubicmeters)
#endif
        {
            double value = (double) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }

        /// <summary>
        ///     Get Volume from KiloimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloimperialGallons(double kiloimperialgallons)
#else
        public static Volume FromKiloimperialGallons(QuantityValue kiloimperialgallons)
#endif
        {
            double value = (double) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }

        /// <summary>
        ///     Get Volume from KilousGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilousGallons(double kilousgallons)
#else
        public static Volume FromKilousGallons(QuantityValue kilousgallons)
#endif
        {
            double value = (double) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }

        /// <summary>
        ///     Get Volume from Liters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromLiters(double liters)
#else
        public static Volume FromLiters(QuantityValue liters)
#endif
        {
            double value = (double) liters;
            return new Volume(value, VolumeUnit.Liter);
        }

        /// <summary>
        ///     Get Volume from MegacubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicFeet(double megacubicfeet)
#else
        public static Volume FromMegacubicFeet(QuantityValue megacubicfeet)
#endif
        {
            double value = (double) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }

        /// <summary>
        ///     Get Volume from MegaimperialGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaimperialGallons(double megaimperialgallons)
#else
        public static Volume FromMegaimperialGallons(QuantityValue megaimperialgallons)
#endif
        {
            double value = (double) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }

        /// <summary>
        ///     Get Volume from MegausGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegausGallons(double megausgallons)
#else
        public static Volume FromMegausGallons(QuantityValue megausgallons)
#endif
        {
            double value = (double) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }

        /// <summary>
        ///     Get Volume from MetricCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricCups(double metriccups)
#else
        public static Volume FromMetricCups(QuantityValue metriccups)
#endif
        {
            double value = (double) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }

        /// <summary>
        ///     Get Volume from MetricTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricTeaspoons(double metricteaspoons)
#else
        public static Volume FromMetricTeaspoons(QuantityValue metricteaspoons)
#endif
        {
            double value = (double) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }

        /// <summary>
        ///     Get Volume from Microliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicroliters(double microliters)
#else
        public static Volume FromMicroliters(QuantityValue microliters)
#endif
        {
            double value = (double) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }

        /// <summary>
        ///     Get Volume from Milliliters.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMilliliters(double milliliters)
#else
        public static Volume FromMilliliters(QuantityValue milliliters)
#endif
        {
            double value = (double) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }

        /// <summary>
        ///     Get Volume from OilBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromOilBarrels(double oilbarrels)
#else
        public static Volume FromOilBarrels(QuantityValue oilbarrels)
#endif
        {
            double value = (double) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }

        /// <summary>
        ///     Get Volume from UkTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUkTablespoons(double uktablespoons)
#else
        public static Volume FromUkTablespoons(QuantityValue uktablespoons)
#endif
        {
            double value = (double) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }

        /// <summary>
        ///     Get Volume from UsBeerBarrels.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsBeerBarrels(double usbeerbarrels)
#else
        public static Volume FromUsBeerBarrels(QuantityValue usbeerbarrels)
#endif
        {
            double value = (double) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }

        /// <summary>
        ///     Get Volume from UsCustomaryCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsCustomaryCups(double uscustomarycups)
#else
        public static Volume FromUsCustomaryCups(QuantityValue uscustomarycups)
#endif
        {
            double value = (double) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }

        /// <summary>
        ///     Get Volume from UsGallons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsGallons(double usgallons)
#else
        public static Volume FromUsGallons(QuantityValue usgallons)
#endif
        {
            double value = (double) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }

        /// <summary>
        ///     Get Volume from UsLegalCups.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsLegalCups(double uslegalcups)
#else
        public static Volume FromUsLegalCups(QuantityValue uslegalcups)
#endif
        {
            double value = (double) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }

        /// <summary>
        ///     Get Volume from UsOunces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsOunces(double usounces)
#else
        public static Volume FromUsOunces(QuantityValue usounces)
#endif
        {
            double value = (double) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }

        /// <summary>
        ///     Get Volume from UsPints.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsPints(double uspints)
#else
        public static Volume FromUsPints(QuantityValue uspints)
#endif
        {
            double value = (double) uspints;
            return new Volume(value, VolumeUnit.UsPint);
        }

        /// <summary>
        ///     Get Volume from UsQuarts.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsQuarts(double usquarts)
#else
        public static Volume FromUsQuarts(QuantityValue usquarts)
#endif
        {
            double value = (double) usquarts;
            return new Volume(value, VolumeUnit.UsQuart);
        }

        /// <summary>
        ///     Get Volume from UsTablespoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTablespoons(double ustablespoons)
#else
        public static Volume FromUsTablespoons(QuantityValue ustablespoons)
#endif
        {
            double value = (double) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }

        /// <summary>
        ///     Get Volume from UsTeaspoons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTeaspoons(double usteaspoons)
#else
        public static Volume FromUsTeaspoons(QuantityValue usteaspoons)
#endif
        {
            double value = (double) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Volume From(double value, VolumeUnit fromUnit)
#else
        public static Volume From(QuantityValue value, VolumeUnit fromUnit)
#endif
        {
            return new Volume((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        public IQuantity Add(IQuantity right)
        {
            if(!(right is Volume))
                throw new ArgumentException("The given quantity is not of type Volume.", nameof(right));

            return Add((Volume)right);
        }

        public IQuantity Subtract(IQuantity right)
        {
            if(!(right is Volume))
                throw new ArgumentException("The given quantity is not of type Volume.", nameof(right));

            return Subtract((Volume)right);
        }

        public Volume Add(Volume right)
        {
            return new Volume(Value + right.AsBaseNumericType(Unit), Unit);
        }

        public Volume Subtract(Volume right)
        {
            return new Volume(Value - right.AsBaseNumericType(Unit), Unit);
        }

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Volume)) throw new ArgumentException("Expected type Volume.", nameof(obj));

            return CompareTo((Volume)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Volume other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Volume within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Volume other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Volume with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Volume(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case VolumeUnit.AuTablespoon: return _value*2e-5;
                case VolumeUnit.Centiliter: return (_value/1e3) * 1e-2d;
                case VolumeUnit.CubicCentimeter: return _value/1e6;
                case VolumeUnit.CubicDecimeter: return _value/1e3;
                case VolumeUnit.CubicFoot: return _value*0.0283168;
                case VolumeUnit.CubicInch: return _value*1.6387*1e-5;
                case VolumeUnit.CubicKilometer: return _value*1e9;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value/1e18;
                case VolumeUnit.CubicMile: return _value*4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return _value/1e9;
                case VolumeUnit.CubicYard: return _value*0.764554858;
                case VolumeUnit.Deciliter: return (_value/1e3) * 1e-1d;
                case VolumeUnit.HectocubicFoot: return (_value*0.0283168) * 1e2d;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2d;
                case VolumeUnit.Hectoliter: return (_value/1e3) * 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return _value*0.16365924;
                case VolumeUnit.ImperialGallon: return _value*0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return _value*2.8413062499962901241875439064617e-5;
                case VolumeUnit.KilocubicFoot: return (_value*0.0283168) * 1e3d;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3d;
                case VolumeUnit.KiloimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e3d;
                case VolumeUnit.KilousGallon: return (_value*0.00378541) * 1e3d;
                case VolumeUnit.Liter: return _value/1e3;
                case VolumeUnit.MegacubicFoot: return (_value*0.0283168) * 1e6d;
                case VolumeUnit.MegaimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e6d;
                case VolumeUnit.MegausGallon: return (_value*0.00378541) * 1e6d;
                case VolumeUnit.MetricCup: return _value*0.00025;
                case VolumeUnit.MetricTeaspoon: return _value*0.5e-5;
                case VolumeUnit.Microliter: return (_value/1e3) * 1e-6d;
                case VolumeUnit.Milliliter: return (_value/1e3) * 1e-3d;
                case VolumeUnit.OilBarrel: return _value*0.158987294928;
                case VolumeUnit.UkTablespoon: return _value*1.5e-5;
                case VolumeUnit.UsBeerBarrel: return _value*0.1173477658;
                case VolumeUnit.UsCustomaryCup: return _value*0.0002365882365;
                case VolumeUnit.UsGallon: return _value*0.00378541;
                case VolumeUnit.UsLegalCup: return _value*0.00024;
                case VolumeUnit.UsOunce: return _value*2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return _value*4.73176473e-4;
                case VolumeUnit.UsQuart: return _value*9.46352946e-4;
                case VolumeUnit.UsTablespoon: return _value*1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return _value*4.92892159375e-6;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(VolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case VolumeUnit.AuTablespoon: return baseUnitValue/2e-5;
                case VolumeUnit.Centiliter: return (baseUnitValue*1e3) / 1e-2d;
                case VolumeUnit.CubicCentimeter: return baseUnitValue*1e6;
                case VolumeUnit.CubicDecimeter: return baseUnitValue*1e3;
                case VolumeUnit.CubicFoot: return baseUnitValue/0.0283168;
                case VolumeUnit.CubicInch: return baseUnitValue/(1.6387*1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue/1e9;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue*1e18;
                case VolumeUnit.CubicMile: return baseUnitValue/4.16818182544058e9;
                case VolumeUnit.CubicMillimeter: return baseUnitValue*1e9;
                case VolumeUnit.CubicYard: return baseUnitValue/0.764554858;
                case VolumeUnit.Deciliter: return (baseUnitValue*1e3) / 1e-1d;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue/0.0283168) / 1e2d;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2d;
                case VolumeUnit.Hectoliter: return (baseUnitValue*1e3) / 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue/0.16365924;
                case VolumeUnit.ImperialGallon: return baseUnitValue/0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return baseUnitValue/2.8413062499962901241875439064617e-5;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue/0.0283168) / 1e3d;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3d;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e3d;
                case VolumeUnit.KilousGallon: return (baseUnitValue/0.00378541) / 1e3d;
                case VolumeUnit.Liter: return baseUnitValue*1e3;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue/0.0283168) / 1e6d;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e6d;
                case VolumeUnit.MegausGallon: return (baseUnitValue/0.00378541) / 1e6d;
                case VolumeUnit.MetricCup: return baseUnitValue/0.00025;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue/0.5e-5;
                case VolumeUnit.Microliter: return (baseUnitValue*1e3) / 1e-6d;
                case VolumeUnit.Milliliter: return (baseUnitValue*1e3) / 1e-3d;
                case VolumeUnit.OilBarrel: return baseUnitValue/0.158987294928;
                case VolumeUnit.UkTablespoon: return baseUnitValue/1.5e-5;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue/0.1173477658;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue/0.0002365882365;
                case VolumeUnit.UsGallon: return baseUnitValue/0.00378541;
                case VolumeUnit.UsLegalCup: return baseUnitValue/0.00024;
                case VolumeUnit.UsOunce: return baseUnitValue/2.957352956253760505068307980135e-5;
                case VolumeUnit.UsPint: return baseUnitValue/4.73176473e-4;
                case VolumeUnit.UsQuart: return baseUnitValue/9.46352946e-4;
                case VolumeUnit.UsTablespoon: return baseUnitValue/1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return baseUnitValue/4.92892159375e-6;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return ParseInternal(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParseInternal(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnitInternal(str, null);
        }

        public static bool TryParseUnit(string str, out VolumeUnit unit)
        {
            return TryParseUnitInternal(str, null, out unit);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        private static Volume ParseInternal(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Volume, VolumeUnit>(str, provider, ParseUnitInternal, From,
                (x, y) => From(x.CubicMeters + y.CubicMeters, BaseUnit));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseInternal([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Volume result)
        {
            result = default(Volume);

            if(string.IsNullOrWhiteSpace(str))
                return false;

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.TryParse<Volume, VolumeUnit>(str, provider, TryParseUnitInternal, From,
                (x, y) => From(x.CubicMeters + y.CubicMeters, BaseUnit), out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        private static VolumeUnit ParseUnitInternal(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<VolumeUnit>(str.Trim());

            if (unit == VolumeUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized VolumeUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseUnitInternal(string str, IFormatProvider provider, out VolumeUnit unit)
        {
            unit = VolumeUnit.Undefined;

            if(string.IsNullOrWhiteSpace(str))
                return false;

            var unitSystem = UnitSystem.GetCached(provider);
            if(!unitSystem.TryParse<VolumeUnit>(str.Trim(), out unit))
                return false;

            if(unit == VolumeUnit.Undefined)
                return false;

            return true;
        }

        #endregion

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(VolumeUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue => new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue => new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Volume.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;
    }
}
