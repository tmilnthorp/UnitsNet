//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Density : IQuantity
#else
    public partial struct Density : IQuantity, IComparable, IComparable<Density>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DensityUnit? _unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public DensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        static Density()
        {
            BaseDimensions = new BaseDimensions(-3, 1, 0, 0, 0, 0, 0);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        private
#else
        public
#endif
        Density(double numericValue, DensityUnit unit)
        {
            if(unit == DensityUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Density;

        /// <summary>
        ///     The base unit of Density, which is KilogramPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit => DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions
        {
            get;
        }

        /// <summary>
        ///     All units of measurement for the Density quantity.
        /// </summary>
        public static DensityUnit[] Units { get; } = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>().Except(new DensityUnit[]{ DensityUnit.Undefined }).ToArray();

        /// <summary>
        ///     Get Density in CentigramsPerDeciLiter.
        /// </summary>
        public double CentigramsPerDeciLiter => As(DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Get Density in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter => As(DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Get Density in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter => As(DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Get Density in DecigramsPerDeciLiter.
        /// </summary>
        public double DecigramsPerDeciLiter => As(DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Get Density in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter => As(DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Get Density in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter => As(DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Get Density in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter => As(DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Get Density in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter => As(DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Get Density in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter => As(DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Get Density in GramsPerDeciLiter.
        /// </summary>
        public double GramsPerDeciLiter => As(DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Get Density in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter => As(DensityUnit.GramPerLiter);

        /// <summary>
        ///     Get Density in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter => As(DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter => As(DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Get Density in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Get Density in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot => As(DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Get Density in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch => As(DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Get Density in MicrogramsPerDeciLiter.
        /// </summary>
        public double MicrogramsPerDeciLiter => As(DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Get Density in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter => As(DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Get Density in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter => As(DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Get Density in MilligramsPerCubicMeter.
        /// </summary>
        public double MilligramsPerCubicMeter => As(DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Get Density in MilligramsPerDeciLiter.
        /// </summary>
        public double MilligramsPerDeciLiter => As(DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Get Density in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter => As(DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Get Density in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter => As(DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Get Density in NanogramsPerDeciLiter.
        /// </summary>
        public double NanogramsPerDeciLiter => As(DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Get Density in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter => As(DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Get Density in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter => As(DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Get Density in PicogramsPerDeciLiter.
        /// </summary>
        public double PicogramsPerDeciLiter => As(DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Get Density in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter => As(DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Get Density in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter => As(DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Get Density in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot => As(DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Get Density in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch => As(DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Get Density in PoundsPerImperialGallon.
        /// </summary>
        public double PoundsPerImperialGallon => As(DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Get Density in PoundsPerUSGallon.
        /// </summary>
        public double PoundsPerUSGallon => As(DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Get Density in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot => As(DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Get Density in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter => As(DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Get Density in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter => As(DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Get Density in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter => As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        public static Density Zero => new Density(0, BaseUnit);

        /// <summary>
        ///     Get Density from CentigramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerDeciLiter(double centigramsperdeciliter)
#else
        public static Density FromCentigramsPerDeciLiter(QuantityValue centigramsperdeciliter)
#endif
        {
            double value = (double) centigramsperdeciliter;
            return new Density(value, DensityUnit.CentigramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from CentigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerLiter(double centigramsperliter)
#else
        public static Density FromCentigramsPerLiter(QuantityValue centigramsperliter)
#endif
        {
            double value = (double) centigramsperliter;
            return new Density(value, DensityUnit.CentigramPerLiter);
        }

        /// <summary>
        ///     Get Density from CentigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerMilliliter(double centigramspermilliliter)
#else
        public static Density FromCentigramsPerMilliliter(QuantityValue centigramspermilliliter)
#endif
        {
            double value = (double) centigramspermilliliter;
            return new Density(value, DensityUnit.CentigramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerDeciLiter(double decigramsperdeciliter)
#else
        public static Density FromDecigramsPerDeciLiter(QuantityValue decigramsperdeciliter)
#endif
        {
            double value = (double) decigramsperdeciliter;
            return new Density(value, DensityUnit.DecigramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerLiter(double decigramsperliter)
#else
        public static Density FromDecigramsPerLiter(QuantityValue decigramsperliter)
#endif
        {
            double value = (double) decigramsperliter;
            return new Density(value, DensityUnit.DecigramPerLiter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerMilliliter(double decigramspermilliliter)
#else
        public static Density FromDecigramsPerMilliliter(QuantityValue decigramspermilliliter)
#endif
        {
            double value = (double) decigramspermilliliter;
            return new Density(value, DensityUnit.DecigramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicCentimeter(double gramspercubiccentimeter)
#else
        public static Density FromGramsPerCubicCentimeter(QuantityValue gramspercubiccentimeter)
#endif
        {
            double value = (double) gramspercubiccentimeter;
            return new Density(value, DensityUnit.GramPerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMeter(double gramspercubicmeter)
#else
        public static Density FromGramsPerCubicMeter(QuantityValue gramspercubicmeter)
#endif
        {
            double value = (double) gramspercubicmeter;
            return new Density(value, DensityUnit.GramPerCubicMeter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMillimeter(double gramspercubicmillimeter)
#else
        public static Density FromGramsPerCubicMillimeter(QuantityValue gramspercubicmillimeter)
#endif
        {
            double value = (double) gramspercubicmillimeter;
            return new Density(value, DensityUnit.GramPerCubicMillimeter);
        }

        /// <summary>
        ///     Get Density from GramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerDeciLiter(double gramsperdeciliter)
#else
        public static Density FromGramsPerDeciLiter(QuantityValue gramsperdeciliter)
#endif
        {
            double value = (double) gramsperdeciliter;
            return new Density(value, DensityUnit.GramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from GramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerLiter(double gramsperliter)
#else
        public static Density FromGramsPerLiter(QuantityValue gramsperliter)
#endif
        {
            double value = (double) gramsperliter;
            return new Density(value, DensityUnit.GramPerLiter);
        }

        /// <summary>
        ///     Get Density from GramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerMilliliter(double gramspermilliliter)
#else
        public static Density FromGramsPerMilliliter(QuantityValue gramspermilliliter)
#endif
        {
            double value = (double) gramspermilliliter;
            return new Density(value, DensityUnit.GramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter)
#else
        public static Density FromKilogramsPerCubicCentimeter(QuantityValue kilogramspercubiccentimeter)
#endif
        {
            double value = (double) kilogramspercubiccentimeter;
            return new Density(value, DensityUnit.KilogramPerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMeter(double kilogramspercubicmeter)
#else
        public static Density FromKilogramsPerCubicMeter(QuantityValue kilogramspercubicmeter)
#endif
        {
            double value = (double) kilogramspercubicmeter;
            return new Density(value, DensityUnit.KilogramPerCubicMeter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter)
#else
        public static Density FromKilogramsPerCubicMillimeter(QuantityValue kilogramspercubicmillimeter)
#endif
        {
            double value = (double) kilogramspercubicmillimeter;
            return new Density(value, DensityUnit.KilogramPerCubicMillimeter);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot)
#else
        public static Density FromKilopoundsPerCubicFoot(QuantityValue kilopoundspercubicfoot)
#endif
        {
            double value = (double) kilopoundspercubicfoot;
            return new Density(value, DensityUnit.KilopoundPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicInch(double kilopoundspercubicinch)
#else
        public static Density FromKilopoundsPerCubicInch(QuantityValue kilopoundspercubicinch)
#endif
        {
            double value = (double) kilopoundspercubicinch;
            return new Density(value, DensityUnit.KilopoundPerCubicInch);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerDeciLiter(double microgramsperdeciliter)
#else
        public static Density FromMicrogramsPerDeciLiter(QuantityValue microgramsperdeciliter)
#endif
        {
            double value = (double) microgramsperdeciliter;
            return new Density(value, DensityUnit.MicrogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerLiter(double microgramsperliter)
#else
        public static Density FromMicrogramsPerLiter(QuantityValue microgramsperliter)
#endif
        {
            double value = (double) microgramsperliter;
            return new Density(value, DensityUnit.MicrogramPerLiter);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerMilliliter(double microgramspermilliliter)
#else
        public static Density FromMicrogramsPerMilliliter(QuantityValue microgramspermilliliter)
#endif
        {
            double value = (double) microgramspermilliliter;
            return new Density(value, DensityUnit.MicrogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerCubicMeter(double milligramspercubicmeter)
#else
        public static Density FromMilligramsPerCubicMeter(QuantityValue milligramspercubicmeter)
#endif
        {
            double value = (double) milligramspercubicmeter;
            return new Density(value, DensityUnit.MilligramPerCubicMeter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerDeciLiter(double milligramsperdeciliter)
#else
        public static Density FromMilligramsPerDeciLiter(QuantityValue milligramsperdeciliter)
#endif
        {
            double value = (double) milligramsperdeciliter;
            return new Density(value, DensityUnit.MilligramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerLiter(double milligramsperliter)
#else
        public static Density FromMilligramsPerLiter(QuantityValue milligramsperliter)
#endif
        {
            double value = (double) milligramsperliter;
            return new Density(value, DensityUnit.MilligramPerLiter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerMilliliter(double milligramspermilliliter)
#else
        public static Density FromMilligramsPerMilliliter(QuantityValue milligramspermilliliter)
#endif
        {
            double value = (double) milligramspermilliliter;
            return new Density(value, DensityUnit.MilligramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerDeciLiter(double nanogramsperdeciliter)
#else
        public static Density FromNanogramsPerDeciLiter(QuantityValue nanogramsperdeciliter)
#endif
        {
            double value = (double) nanogramsperdeciliter;
            return new Density(value, DensityUnit.NanogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerLiter(double nanogramsperliter)
#else
        public static Density FromNanogramsPerLiter(QuantityValue nanogramsperliter)
#endif
        {
            double value = (double) nanogramsperliter;
            return new Density(value, DensityUnit.NanogramPerLiter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerMilliliter(double nanogramspermilliliter)
#else
        public static Density FromNanogramsPerMilliliter(QuantityValue nanogramspermilliliter)
#endif
        {
            double value = (double) nanogramspermilliliter;
            return new Density(value, DensityUnit.NanogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerDeciLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerDeciLiter(double picogramsperdeciliter)
#else
        public static Density FromPicogramsPerDeciLiter(QuantityValue picogramsperdeciliter)
#endif
        {
            double value = (double) picogramsperdeciliter;
            return new Density(value, DensityUnit.PicogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerLiter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerLiter(double picogramsperliter)
#else
        public static Density FromPicogramsPerLiter(QuantityValue picogramsperliter)
#endif
        {
            double value = (double) picogramsperliter;
            return new Density(value, DensityUnit.PicogramPerLiter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerMilliliter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerMilliliter(double picogramspermilliliter)
#else
        public static Density FromPicogramsPerMilliliter(QuantityValue picogramspermilliliter)
#endif
        {
            double value = (double) picogramspermilliliter;
            return new Density(value, DensityUnit.PicogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicFoot(double poundspercubicfoot)
#else
        public static Density FromPoundsPerCubicFoot(QuantityValue poundspercubicfoot)
#endif
        {
            double value = (double) poundspercubicfoot;
            return new Density(value, DensityUnit.PoundPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicInch.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicInch(double poundspercubicinch)
#else
        public static Density FromPoundsPerCubicInch(QuantityValue poundspercubicinch)
#endif
        {
            double value = (double) poundspercubicinch;
            return new Density(value, DensityUnit.PoundPerCubicInch);
        }

        /// <summary>
        ///     Get Density from PoundsPerImperialGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerImperialGallon(double poundsperimperialgallon)
#else
        public static Density FromPoundsPerImperialGallon(QuantityValue poundsperimperialgallon)
#endif
        {
            double value = (double) poundsperimperialgallon;
            return new Density(value, DensityUnit.PoundPerImperialGallon);
        }

        /// <summary>
        ///     Get Density from PoundsPerUSGallon.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerUSGallon(double poundsperusgallon)
#else
        public static Density FromPoundsPerUSGallon(QuantityValue poundsperusgallon)
#endif
        {
            double value = (double) poundsperusgallon;
            return new Density(value, DensityUnit.PoundPerUSGallon);
        }

        /// <summary>
        ///     Get Density from SlugsPerCubicFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicFoot(double slugspercubicfoot)
#else
        public static Density FromSlugsPerCubicFoot(QuantityValue slugspercubicfoot)
#endif
        {
            double value = (double) slugspercubicfoot;
            return new Density(value, DensityUnit.SlugPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicCentimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter)
#else
        public static Density FromTonnesPerCubicCentimeter(QuantityValue tonnespercubiccentimeter)
#endif
        {
            double value = (double) tonnespercubiccentimeter;
            return new Density(value, DensityUnit.TonnePerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMeter(double tonnespercubicmeter)
#else
        public static Density FromTonnesPerCubicMeter(QuantityValue tonnespercubicmeter)
#endif
        {
            double value = (double) tonnespercubicmeter;
            return new Density(value, DensityUnit.TonnePerCubicMeter);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMillimeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter)
#else
        public static Density FromTonnesPerCubicMillimeter(QuantityValue tonnespercubicmillimeter)
#endif
        {
            double value = (double) tonnespercubicmillimeter;
            return new Density(value, DensityUnit.TonnePerCubicMillimeter);
        }


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Density From(double value, DensityUnit fromUnit)
#else
        public static Density From(QuantityValue value, DensityUnit fromUnit)
#endif
        {
            return new Density((double)value, fromUnit);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        #endregion

        public IQuantity Add(IQuantity right)
        {
            if(!(right is Density))
                throw new ArgumentException("The given quantity is not of type Density.", nameof(right));

            return Add((Density)right);
        }

        public IQuantity Subtract(IQuantity right)
        {
            if(!(right is Density))
                throw new ArgumentException("The given quantity is not of type Density.", nameof(right));

            return Subtract((Density)right);
        }

        public Density Add(Density right)
        {
            return new Density(Value + right.AsBaseNumericType(Unit), Unit);
        }

        public Density Subtract(Density right)
        {
            return new Density(Value - right.AsBaseNumericType(Unit), Unit);
        }

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Density)) throw new ArgumentException("Expected type Density.", nameof(obj));

            return CompareTo((Density)obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Density other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Density within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Density other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Density.</returns>
        public override int GetHashCode()
        {
            return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(DensityUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this Density to another Density with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Density with the specified unit.</returns>
        public Density ToUnit(DensityUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new Density(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (_value/1e-1) * 1e-2d;
                case DensityUnit.CentigramPerLiter: return (_value/1) * 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (_value/1e-3) * 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (_value/1e-1) * 1e-1d;
                case DensityUnit.DecigramPerLiter: return (_value/1) * 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (_value/1e-3) * 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return _value/1e-3;
                case DensityUnit.GramPerCubicMeter: return _value/1e3;
                case DensityUnit.GramPerCubicMillimeter: return _value/1e-6;
                case DensityUnit.GramPerDeciliter: return _value/1e-1;
                case DensityUnit.GramPerLiter: return _value/1;
                case DensityUnit.GramPerMilliliter: return _value/1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (_value/1e-3) * 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (_value/1e3) * 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (_value/1e-6) * 1e3d;
                case DensityUnit.KilopoundPerCubicFoot: return (_value/0.062427961) * 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (_value/3.6127298147753e-5) * 1e3d;
                case DensityUnit.MicrogramPerDeciliter: return (_value/1e-1) * 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (_value/1) * 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (_value/1e-3) * 1e-6d;
                case DensityUnit.MilligramPerCubicMeter: return (_value/1e3) * 1e-3d;
                case DensityUnit.MilligramPerDeciliter: return (_value/1e-1) * 1e-3d;
                case DensityUnit.MilligramPerLiter: return (_value/1) * 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (_value/1e-3) * 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (_value/1e-1) * 1e-9d;
                case DensityUnit.NanogramPerLiter: return (_value/1) * 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (_value/1e-3) * 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (_value/1e-1) * 1e-12d;
                case DensityUnit.PicogramPerLiter: return (_value/1) * 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (_value/1e-3) * 1e-12d;
                case DensityUnit.PoundPerCubicFoot: return _value/0.062427961;
                case DensityUnit.PoundPerCubicInch: return _value/3.6127298147753e-5;
                case DensityUnit.PoundPerImperialGallon: return _value*9.9776398e1;
                case DensityUnit.PoundPerUSGallon: return _value*1.19826427e2;
                case DensityUnit.SlugPerCubicFoot: return _value*515.378818;
                case DensityUnit.TonnePerCubicCentimeter: return _value/1e-9;
                case DensityUnit.TonnePerCubicMeter: return _value/0.001;
                case DensityUnit.TonnePerCubicMillimeter: return _value/1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(DensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-2d;
                case DensityUnit.CentigramPerLiter: return (baseUnitValue*1) / 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-1d;
                case DensityUnit.DecigramPerLiter: return (baseUnitValue*1) / 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return baseUnitValue*1e-3;
                case DensityUnit.GramPerCubicMeter: return baseUnitValue*1e3;
                case DensityUnit.GramPerCubicMillimeter: return baseUnitValue*1e-6;
                case DensityUnit.GramPerDeciliter: return baseUnitValue*1e-1;
                case DensityUnit.GramPerLiter: return baseUnitValue*1;
                case DensityUnit.GramPerMilliliter: return baseUnitValue*1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (baseUnitValue*1e-3) / 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (baseUnitValue*1e3) / 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (baseUnitValue*1e-6) / 1e3d;
                case DensityUnit.KilopoundPerCubicFoot: return (baseUnitValue*0.062427961) / 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (baseUnitValue*3.6127298147753e-5) / 1e3d;
                case DensityUnit.MicrogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (baseUnitValue*1) / 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-6d;
                case DensityUnit.MilligramPerCubicMeter: return (baseUnitValue*1e3) / 1e-3d;
                case DensityUnit.MilligramPerDeciliter: return (baseUnitValue*1e-1) / 1e-3d;
                case DensityUnit.MilligramPerLiter: return (baseUnitValue*1) / 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (baseUnitValue*1e-3) / 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-9d;
                case DensityUnit.NanogramPerLiter: return (baseUnitValue*1) / 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-12d;
                case DensityUnit.PicogramPerLiter: return (baseUnitValue*1) / 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-12d;
                case DensityUnit.PoundPerCubicFoot: return baseUnitValue*0.062427961;
                case DensityUnit.PoundPerCubicInch: return baseUnitValue*3.6127298147753e-5;
                case DensityUnit.PoundPerImperialGallon: return baseUnitValue/9.9776398e1;
                case DensityUnit.PoundPerUSGallon: return baseUnitValue/1.19826427e2;
                case DensityUnit.SlugPerCubicFoot: return baseUnitValue*0.00194032033;
                case DensityUnit.TonnePerCubicCentimeter: return baseUnitValue*1e-9;
                case DensityUnit.TonnePerCubicMeter: return baseUnitValue*0.001;
                case DensityUnit.TonnePerCubicMillimeter: return baseUnitValue*1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str)
        {
            return ParseInternal(str, null);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Density result)
        {
            return TryParseInternal(str, null, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str)
        {
            return ParseUnitInternal(str, null);
        }

        public static bool TryParseUnit(string str, out DensityUnit unit)
        {
            return TryParseUnitInternal(str, null, out unit);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        private static Density ParseInternal(string str, [CanBeNull] IFormatProvider provider)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.Parse<Density, DensityUnit>(str, provider, ParseUnitInternal, From,
                (x, y) => From(x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter, BaseUnit));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseInternal([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Density result)
        {
            result = default(Density);

            if(string.IsNullOrWhiteSpace(str))
                return false;

            provider = provider ?? UnitSystem.DefaultCulture;

            return QuantityParser.TryParse<Density, DensityUnit>(str, provider, TryParseUnitInternal, From,
                (x, y) => From(x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter, BaseUnit), out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        private static DensityUnit ParseUnitInternal(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException(nameof(str));

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<DensityUnit>(str.Trim());

            if (unit == DensityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DensityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        private static bool TryParseUnitInternal(string str, IFormatProvider provider, out DensityUnit unit)
        {
            unit = DensityUnit.Undefined;

            if(string.IsNullOrWhiteSpace(str))
                return false;

            var unitSystem = UnitSystem.GetCached(provider);
            if(!unitSystem.TryParse<DensityUnit>(str.Trim(), out unit))
                return false;

            if(unit == DensityUnit.Undefined)
                return false;

            return true;
        }

        #endregion

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(DensityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        /// Represents the largest possible value of Density
        /// </summary>
        public static Density MaxValue => new Density(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Density
        /// </summary>
        public static Density MinValue => new Density(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Density.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Density.BaseDimensions;
    }
}
