//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    public partial class VolumeFlow : Quantity<double>, IQuantity<VolumeFlowUnit>, IEquatable<VolumeFlow>, IComparable, IComparable<VolumeFlow>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit? _unit;

        static VolumeFlow()
        {
            BaseDimensions = new BaseDimensions(3, 0, -1, 0, 0, 0, 0);

            Info = new QuantityInfo<VolumeFlowUnit>(QuantityType.VolumeFlow,
                new UnitInfo<VolumeFlowUnit>[] {
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.AcreFootPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CentiliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CentiliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicDecimeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicFootPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicMillimeterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.CubicYardPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.DeciliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.DeciliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KiloliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KiloliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.KilousGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.LiterPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MegaliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MegaukGallonPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MicroliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MicroliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MilliliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MilliliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.MillionUsGallonsPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.NanoliterPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.NanoliterPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.OilBarrelPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UkGallonPerSecond, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerDay, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerHour, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerMinute, BaseUnits.Undefined),
                    new UnitInfo<VolumeFlowUnit>(VolumeFlowUnit.UsGallonPerSecond, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public VolumeFlow(double numericValue, VolumeFlowUnit unit)
        {
            if(unit == VolumeFlowUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="InvalidOperationException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        /// <exception cref="InvalidOperationException">More than one unit was found for the given <see cref="UnitSystem"/>.</exception>
        public VolumeFlow(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<VolumeFlowUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of VolumeFlow, which is CubicMeterPerSecond. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MaxValue { get; } = new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumeFlow
        /// </summary>
        public static VolumeFlow MinValue { get; } = new VolumeFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.VolumeFlow;

        /// <summary>
        ///     All units of measurement for the VolumeFlow quantity.
        /// </summary>
        public static VolumeFlowUnit[] Units { get; } = Enum.GetValues(typeof(VolumeFlowUnit)).Cast<VolumeFlowUnit>().Except(new VolumeFlowUnit[]{ VolumeFlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeterPerSecond.
        /// </summary>
        public static VolumeFlow Zero { get; } = new VolumeFlow(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public VolumeFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<VolumeFlowUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => VolumeFlow.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => VolumeFlow.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerDay.
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerHour.
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerMinute.
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in AcreFeetPerSecond.
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerDay.
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicDecimetersPerMinute.
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerHour.
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerMinute.
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicFeetPerSecond.
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerDay.
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerHour.
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerMinute.
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicMetersPerSecond.
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicMillimetersPerSecond.
        /// </summary>
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerDay.
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerHour.
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerMinute.
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Get VolumeFlow in CubicYardsPerSecond.
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerDay.
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerDay.
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in KilousGallonsPerMinute.
        /// </summary>
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerDay.
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Get VolumeFlow in LitersPerHour.
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Get VolumeFlow in LitersPerMinute.
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in LitersPerSecond.
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MegalitersPerDay.
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MegaukGallonsPerSecond.
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerDay.
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerDay.
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in MillionUsGallonsPerDay.
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerDay.
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Get VolumeFlow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerDay.
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerHour.
        /// </summary>
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerMinute.
        /// </summary>
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Get VolumeFlow in OilBarrelsPerSecond.
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerDay.
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerMinute.
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UkGallonsPerSecond.
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerDay.
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerHour.
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerMinute.
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Get VolumeFlow in UsGallonsPerSecond.
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(VolumeFlowUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerDay(QuantityValue acrefeetperday)
        {
            double value = (double) acrefeetperday;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerHour(QuantityValue acrefeetperhour)
        {
            double value = (double) acrefeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerMinute(QuantityValue acrefeetperminute)
        {
            double value = (double) acrefeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from AcreFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerSecond(QuantityValue acrefeetpersecond)
        {
            double value = (double) acrefeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.AcreFootPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CentilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerDay(QuantityValue centilitersperday)
        {
            double value = (double) centilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CentiliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CentilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerMinute(QuantityValue centilitersperminute)
        {
            double value = (double) centilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CentiliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicDecimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
        {
            double value = (double) cubicdecimetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicDecimeterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
        {
            double value = (double) cubicfeetperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
        {
            double value = (double) cubicfeetperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
        {
            double value = (double) cubicfeetpersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicFootPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerDay(QuantityValue cubicmetersperday)
        {
            double value = (double) cubicmetersperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
        {
            double value = (double) cubicmetersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
        {
            double value = (double) cubicmetersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
        {
            double value = (double) cubicmeterspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMeterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicMillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMillimetersPerSecond(QuantityValue cubicmillimeterspersecond)
        {
            double value = (double) cubicmillimeterspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicMillimeterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerDay(QuantityValue cubicyardsperday)
        {
            double value = (double) cubicyardsperday;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
        {
            double value = (double) cubicyardsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
        {
            double value = (double) cubicyardsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from CubicYardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
        {
            double value = (double) cubicyardspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.CubicYardPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from DecilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerDay(QuantityValue decilitersperday)
        {
            double value = (double) decilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.DeciliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from DecilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerMinute(QuantityValue decilitersperminute)
        {
            double value = (double) decilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.DeciliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from KilolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerDay(QuantityValue kilolitersperday)
        {
            double value = (double) kilolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.KiloliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from KilolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerMinute(QuantityValue kilolitersperminute)
        {
            double value = (double) kilolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.KiloliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from KilousGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilousGallonsPerMinute(QuantityValue kilousgallonsperminute)
        {
            double value = (double) kilousgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.KilousGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerDay(QuantityValue litersperday)
        {
            double value = (double) litersperday;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerHour(QuantityValue litersperhour)
        {
            double value = (double) litersperhour;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerMinute(QuantityValue litersperminute)
        {
            double value = (double) litersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from LitersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerSecond(QuantityValue literspersecond)
        {
            double value = (double) literspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.LiterPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from MegalitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegalitersPerDay(QuantityValue megalitersperday)
        {
            double value = (double) megalitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MegaliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MegaukGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegaukGallonsPerSecond(QuantityValue megaukgallonspersecond)
        {
            double value = (double) megaukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.MegaukGallonPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerDay(QuantityValue microlitersperday)
        {
            double value = (double) microlitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MicroliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MicrolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerMinute(QuantityValue microlitersperminute)
        {
            double value = (double) microlitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MicroliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from MillilitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerDay(QuantityValue millilitersperday)
        {
            double value = (double) millilitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.MilliliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from MillilitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerMinute(QuantityValue millilitersperminute)
        {
            double value = (double) millilitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.MilliliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from MillionUsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
        {
            double value = (double) millionusgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.MillionUsGallonsPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from NanolitersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerDay(QuantityValue nanolitersperday)
        {
            double value = (double) nanolitersperday;
            return new VolumeFlow(value, VolumeFlowUnit.NanoliterPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from NanolitersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerMinute(QuantityValue nanolitersperminute)
        {
            double value = (double) nanolitersperminute;
            return new VolumeFlow(value, VolumeFlowUnit.NanoliterPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
        {
            double value = (double) oilbarrelsperday;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerHour(QuantityValue oilbarrelsperhour)
        {
            double value = (double) oilbarrelsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerMinute(QuantityValue oilbarrelsperminute)
        {
            double value = (double) oilbarrelsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from OilBarrelsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerSecond(QuantityValue oilbarrelspersecond)
        {
            double value = (double) oilbarrelspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.OilBarrelPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerDay(QuantityValue ukgallonsperday)
        {
            double value = (double) ukgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerMinute(QuantityValue ukgallonsperminute)
        {
            double value = (double) ukgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from UkGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerSecond(QuantityValue ukgallonspersecond)
        {
            double value = (double) ukgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UkGallonPerSecond);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerDay(QuantityValue usgallonsperday)
        {
            double value = (double) usgallonsperday;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerDay);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerHour(QuantityValue usgallonsperhour)
        {
            double value = (double) usgallonsperhour;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerHour);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
        {
            double value = (double) usgallonsperminute;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerMinute);
        }
        /// <summary>
        ///     Get VolumeFlow from UsGallonsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
        {
            double value = (double) usgallonspersecond;
            return new VolumeFlow(value, VolumeFlowUnit.UsGallonPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow From(QuantityValue value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static VolumeFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static VolumeFlow Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<VolumeFlow, VolumeFlowUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out VolumeFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out VolumeFlow result)
        {
            return QuantityParser.Default.TryParse<VolumeFlow, VolumeFlowUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static VolumeFlowUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<VolumeFlowUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.VolumeFlowUnit)"/>
        public static bool TryParseUnit(string str, out VolumeFlowUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out VolumeFlowUnit unit)
        {
            return UnitParser.Default.TryParse<VolumeFlowUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static VolumeFlow operator -(VolumeFlow right)
        {
            return new VolumeFlow(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from adding two <see cref="VolumeFlow"/>.</summary>
        public static VolumeFlow operator +(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from subtracting two <see cref="VolumeFlow"/>.</summary>
        public static VolumeFlow operator -(VolumeFlow left, VolumeFlow right)
        {
            return new VolumeFlow(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from multiplying value and <see cref="VolumeFlow"/>.</summary>
        public static VolumeFlow operator *(double left, VolumeFlow right)
        {
            return new VolumeFlow(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from multiplying value and <see cref="VolumeFlow"/>.</summary>
        public static VolumeFlow operator *(VolumeFlow left, double right)
        {
            return new VolumeFlow(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from dividing <see cref="VolumeFlow"/> by value.</summary>
        public static VolumeFlow operator /(VolumeFlow left, double right)
        {
            return new VolumeFlow(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="VolumeFlow"/> by <see cref="VolumeFlow"/>.</summary>
        public static double operator /(VolumeFlow left, VolumeFlow right)
        {
            return left.CubicMetersPerSecond / right.CubicMetersPerSecond;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(VolumeFlow left, VolumeFlow right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(VolumeFlow left, VolumeFlow right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(VolumeFlow left, VolumeFlow right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(VolumeFlow left, VolumeFlow right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(VolumeFlow, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(VolumeFlow left, VolumeFlow right)
        {
            return left is null ? right is null : left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(VolumeFlow, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(VolumeFlow left, VolumeFlow right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is VolumeFlow objVolumeFlow)) throw new ArgumentException("Expected type VolumeFlow.", nameof(obj));

            return CompareTo(objVolumeFlow);
        }

        /// <inheritdoc />
        public int CompareTo(VolumeFlow other)
        {
            if(other is null) throw new ArgumentNullException(nameof(other));

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(VolumeFlow, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is VolumeFlow objVolumeFlow))
                return false;

            return Equals(objVolumeFlow);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(VolumeFlow, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(VolumeFlow other)
        {
            return other != null ? _value.Equals(other.GetValueAs(this.Unit)) : false;
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another VolumeFlow within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(VolumeFlow other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current VolumeFlow.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitForUnitSystem = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
            return As(unitForUnitSystem);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is VolumeFlowUnit unitAsVolumeFlowUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeFlowUnit)} is supported.", nameof(unit));

            return As(unitAsVolumeFlowUnit);
        }

        /// <summary>
        ///     Converts this VolumeFlow to another VolumeFlow with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A VolumeFlow with the specified unit.</returns>
        public VolumeFlow ToUnit(VolumeFlowUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new VolumeFlow(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is VolumeFlowUnit unitAsVolumeFlowUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(VolumeFlowUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsVolumeFlowUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public VolumeFlow ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitForUnitSystem = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
            return ToUnit(unitForUnitSystem);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<VolumeFlowUnit> IQuantity<VolumeFlowUnit>.ToUnit(VolumeFlowUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<VolumeFlowUnit> IQuantity<VolumeFlowUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return _value/70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return _value/2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return _value/0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return _value/0.000810713194;
                case VolumeFlowUnit.CentiliterPerDay: return (_value/86400000) * 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (_value/60000.00000) * 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return _value/86400;
                case VolumeFlowUnit.CubicMeterPerHour: return _value/3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return _value/60;
                case VolumeFlowUnit.CubicMeterPerSecond: return _value;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return _value*1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return _value/113007;
                case VolumeFlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case VolumeFlowUnit.DeciliterPerDay: return (_value/86400000) * 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (_value/60000.00000) * 1e-1d;
                case VolumeFlowUnit.KiloliterPerDay: return (_value/86400000) * 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (_value/60000.00000) * 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return _value/15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return _value/86400000;
                case VolumeFlowUnit.LiterPerHour: return _value/3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return _value/60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return _value/1000;
                case VolumeFlowUnit.MegaliterPerDay: return (_value/86400000) * 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (_value/219.969) * 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (_value/86400000) * 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (_value/60000.00000) * 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (_value/86400000) * 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (_value/60000.00000) * 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (_value/86400000) * 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (_value/60000.00000) * 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return _value*1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return _value*4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return _value*2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return _value/6.28981;
                case VolumeFlowUnit.UkGallonPerDay: return _value/19005304;
                case VolumeFlowUnit.UkGallonPerMinute: return _value/13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return _value/219.969;
                case VolumeFlowUnit.UsGallonPerDay: return _value/22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return _value/951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return _value/15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return _value/264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(VolumeFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case VolumeFlowUnit.AcreFootPerDay: return baseUnitValue*70.0457;
                case VolumeFlowUnit.AcreFootPerHour: return baseUnitValue*2.91857;
                case VolumeFlowUnit.AcreFootPerMinute: return baseUnitValue*0.0486427916;
                case VolumeFlowUnit.AcreFootPerSecond: return baseUnitValue*0.000810713194;
                case VolumeFlowUnit.CentiliterPerDay: return (baseUnitValue*86400000) / 1e-2d;
                case VolumeFlowUnit.CentiliterPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case VolumeFlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case VolumeFlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case VolumeFlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case VolumeFlowUnit.CubicMeterPerDay: return baseUnitValue*86400;
                case VolumeFlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case VolumeFlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case VolumeFlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case VolumeFlowUnit.CubicMillimeterPerSecond: return baseUnitValue/1e-9;
                case VolumeFlowUnit.CubicYardPerDay: return baseUnitValue*113007;
                case VolumeFlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case VolumeFlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case VolumeFlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case VolumeFlowUnit.DeciliterPerDay: return (baseUnitValue*86400000) / 1e-1d;
                case VolumeFlowUnit.DeciliterPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case VolumeFlowUnit.KiloliterPerDay: return (baseUnitValue*86400000) / 1e3d;
                case VolumeFlowUnit.KiloliterPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case VolumeFlowUnit.KilousGallonPerMinute: return baseUnitValue*15.850323141489;
                case VolumeFlowUnit.LiterPerDay: return baseUnitValue*86400000;
                case VolumeFlowUnit.LiterPerHour: return baseUnitValue*3600000.000;
                case VolumeFlowUnit.LiterPerMinute: return baseUnitValue*60000.00000;
                case VolumeFlowUnit.LiterPerSecond: return baseUnitValue*1000;
                case VolumeFlowUnit.MegaliterPerDay: return (baseUnitValue*86400000) / 1e6d;
                case VolumeFlowUnit.MegaukGallonPerSecond: return (baseUnitValue*219.969) / 1e6d;
                case VolumeFlowUnit.MicroliterPerDay: return (baseUnitValue*86400000) / 1e-6d;
                case VolumeFlowUnit.MicroliterPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case VolumeFlowUnit.MilliliterPerDay: return (baseUnitValue*86400000) / 1e-3d;
                case VolumeFlowUnit.MilliliterPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case VolumeFlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case VolumeFlowUnit.NanoliterPerDay: return (baseUnitValue*86400000) / 1e-9d;
                case VolumeFlowUnit.NanoliterPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case VolumeFlowUnit.OilBarrelPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case VolumeFlowUnit.OilBarrelPerHour: return baseUnitValue/4.41631375e-5;
                case VolumeFlowUnit.OilBarrelPerMinute: return baseUnitValue/2.64978825e-3;
                case VolumeFlowUnit.OilBarrelPerSecond: return baseUnitValue*6.28981;
                case VolumeFlowUnit.UkGallonPerDay: return baseUnitValue*19005304;
                case VolumeFlowUnit.UkGallonPerMinute: return baseUnitValue*13198.2;
                case VolumeFlowUnit.UkGallonPerSecond: return baseUnitValue*219.969;
                case VolumeFlowUnit.UsGallonPerDay: return baseUnitValue*22824465.227;
                case VolumeFlowUnit.UsGallonPerHour: return baseUnitValue*951019.38848933424;
                case VolumeFlowUnit.UsGallonPerMinute: return baseUnitValue*15850.323141489;
                case VolumeFlowUnit.UsGallonPerSecond: return baseUnitValue*264.1720523581484;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<VolumeFlowUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(VolumeFlow)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(VolumeFlow))
                return this;
            else if(conversionType == typeof(VolumeFlowUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return VolumeFlow.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return VolumeFlow.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(VolumeFlow)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
