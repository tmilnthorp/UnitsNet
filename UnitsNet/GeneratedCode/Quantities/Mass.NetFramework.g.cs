//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics, mass (from Greek μᾶζα "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
    /// </summary>
    public partial class Mass : Quantity<double>, IQuantity<MassUnit>, IEquatable<Mass>, IComparable, IComparable<Mass>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassUnit? _unit;

        static Mass()
        {
            BaseDimensions = new BaseDimensions(0, 1, 0, 0, 0, 0, 0);

            Info = new QuantityInfo<MassUnit>(QuantityType.Mass,
                new UnitInfo<MassUnit>[] {
                    new UnitInfo<MassUnit>(MassUnit.Centigram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Decagram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Decigram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Grain, new BaseUnits(mass: MassUnit.Grain)),
                    new UnitInfo<MassUnit>(MassUnit.Gram, new BaseUnits(mass: MassUnit.Gram)),
                    new UnitInfo<MassUnit>(MassUnit.Hectogram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Kilogram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Kilopound, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Kilotonne, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.LongHundredweight, new BaseUnits(mass: MassUnit.LongHundredweight)),
                    new UnitInfo<MassUnit>(MassUnit.LongTon, new BaseUnits(mass: MassUnit.LongTon)),
                    new UnitInfo<MassUnit>(MassUnit.Megapound, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Megatonne, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Microgram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Milligram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Nanogram, BaseUnits.Undefined),
                    new UnitInfo<MassUnit>(MassUnit.Ounce, new BaseUnits(mass: MassUnit.Ounce)),
                    new UnitInfo<MassUnit>(MassUnit.Pound, new BaseUnits(mass: MassUnit.Pound)),
                    new UnitInfo<MassUnit>(MassUnit.ShortHundredweight, new BaseUnits(mass: MassUnit.ShortHundredweight)),
                    new UnitInfo<MassUnit>(MassUnit.ShortTon, new BaseUnits(mass: MassUnit.ShortTon)),
                    new UnitInfo<MassUnit>(MassUnit.Slug, new BaseUnits(mass: MassUnit.Slug)),
                    new UnitInfo<MassUnit>(MassUnit.Stone, new BaseUnits(mass: MassUnit.Stone)),
                    new UnitInfo<MassUnit>(MassUnit.Tonne, new BaseUnits(mass: MassUnit.Tonne)),
                },
                BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unit">The unit representation to contruct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Mass(double numericValue, MassUnit unit)
        {
            if(unit == MassUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// </summary>
        /// <param name="numericValue">The numeric value  to contruct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="InvalidOperationException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        /// <exception cref="InvalidOperationException">More than one unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Mass(double numericValue, UnitSystem unitSystem)
        {
            if(unitSystem == null) throw new ArgumentNullException(nameof(unitSystem));

            _value = Guard.EnsureValidNumber(numericValue, nameof(numericValue));
            _unit = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<MassUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Mass, which is Kilogram. All conversions go via this value.
        /// </summary>
        public static MassUnit BaseUnit { get; } = MassUnit.Kilogram;

        /// <summary>
        /// Represents the largest possible value of Mass
        /// </summary>
        public static Mass MaxValue { get; } = new Mass(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Mass
        /// </summary>
        public static Mass MinValue { get; } = new Mass(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.Mass;

        /// <summary>
        ///     All units of measurement for the Mass quantity.
        /// </summary>
        public static MassUnit[] Units { get; } = Enum.GetValues(typeof(MassUnit)).Cast<MassUnit>().Except(new MassUnit[]{ MassUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Kilogram.
        /// </summary>
        public static Mass Zero { get; } = new Mass(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public MassUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<MassUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => Mass.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Mass.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get Mass in Centigrams.
        /// </summary>
        public double Centigrams => As(MassUnit.Centigram);

        /// <summary>
        ///     Get Mass in Decagrams.
        /// </summary>
        public double Decagrams => As(MassUnit.Decagram);

        /// <summary>
        ///     Get Mass in Decigrams.
        /// </summary>
        public double Decigrams => As(MassUnit.Decigram);

        /// <summary>
        ///     Get Mass in Grains.
        /// </summary>
        public double Grains => As(MassUnit.Grain);

        /// <summary>
        ///     Get Mass in Grams.
        /// </summary>
        public double Grams => As(MassUnit.Gram);

        /// <summary>
        ///     Get Mass in Hectograms.
        /// </summary>
        public double Hectograms => As(MassUnit.Hectogram);

        /// <summary>
        ///     Get Mass in Kilograms.
        /// </summary>
        public double Kilograms => As(MassUnit.Kilogram);

        /// <summary>
        ///     Get Mass in Kilopounds.
        /// </summary>
        public double Kilopounds => As(MassUnit.Kilopound);

        /// <summary>
        ///     Get Mass in Kilotonnes.
        /// </summary>
        public double Kilotonnes => As(MassUnit.Kilotonne);

        /// <summary>
        ///     Get Mass in LongHundredweight.
        /// </summary>
        public double LongHundredweight => As(MassUnit.LongHundredweight);

        /// <summary>
        ///     Get Mass in LongTons.
        /// </summary>
        public double LongTons => As(MassUnit.LongTon);

        /// <summary>
        ///     Get Mass in Megapounds.
        /// </summary>
        public double Megapounds => As(MassUnit.Megapound);

        /// <summary>
        ///     Get Mass in Megatonnes.
        /// </summary>
        public double Megatonnes => As(MassUnit.Megatonne);

        /// <summary>
        ///     Get Mass in Micrograms.
        /// </summary>
        public double Micrograms => As(MassUnit.Microgram);

        /// <summary>
        ///     Get Mass in Milligrams.
        /// </summary>
        public double Milligrams => As(MassUnit.Milligram);

        /// <summary>
        ///     Get Mass in Nanograms.
        /// </summary>
        public double Nanograms => As(MassUnit.Nanogram);

        /// <summary>
        ///     Get Mass in Ounces.
        /// </summary>
        public double Ounces => As(MassUnit.Ounce);

        /// <summary>
        ///     Get Mass in Pounds.
        /// </summary>
        public double Pounds => As(MassUnit.Pound);

        /// <summary>
        ///     Get Mass in ShortHundredweight.
        /// </summary>
        public double ShortHundredweight => As(MassUnit.ShortHundredweight);

        /// <summary>
        ///     Get Mass in ShortTons.
        /// </summary>
        public double ShortTons => As(MassUnit.ShortTon);

        /// <summary>
        ///     Get Mass in Slugs.
        /// </summary>
        public double Slugs => As(MassUnit.Slug);

        /// <summary>
        ///     Get Mass in Stone.
        /// </summary>
        public double Stone => As(MassUnit.Stone);

        /// <summary>
        ///     Get Mass in Tonnes.
        /// </summary>
        public double Tonnes => As(MassUnit.Tonne);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MassUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(MassUnit unit, [CanBeNull] IFormatProvider provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Mass from Centigrams.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromCentigrams(QuantityValue centigrams)
        {
            double value = (double) centigrams;
            return new Mass(value, MassUnit.Centigram);
        }
        /// <summary>
        ///     Get Mass from Decagrams.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromDecagrams(QuantityValue decagrams)
        {
            double value = (double) decagrams;
            return new Mass(value, MassUnit.Decagram);
        }
        /// <summary>
        ///     Get Mass from Decigrams.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromDecigrams(QuantityValue decigrams)
        {
            double value = (double) decigrams;
            return new Mass(value, MassUnit.Decigram);
        }
        /// <summary>
        ///     Get Mass from Grains.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromGrains(QuantityValue grains)
        {
            double value = (double) grains;
            return new Mass(value, MassUnit.Grain);
        }
        /// <summary>
        ///     Get Mass from Grams.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromGrams(QuantityValue grams)
        {
            double value = (double) grams;
            return new Mass(value, MassUnit.Gram);
        }
        /// <summary>
        ///     Get Mass from Hectograms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromHectograms(QuantityValue hectograms)
        {
            double value = (double) hectograms;
            return new Mass(value, MassUnit.Hectogram);
        }
        /// <summary>
        ///     Get Mass from Kilograms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilograms(QuantityValue kilograms)
        {
            double value = (double) kilograms;
            return new Mass(value, MassUnit.Kilogram);
        }
        /// <summary>
        ///     Get Mass from Kilopounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilopounds(QuantityValue kilopounds)
        {
            double value = (double) kilopounds;
            return new Mass(value, MassUnit.Kilopound);
        }
        /// <summary>
        ///     Get Mass from Kilotonnes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromKilotonnes(QuantityValue kilotonnes)
        {
            double value = (double) kilotonnes;
            return new Mass(value, MassUnit.Kilotonne);
        }
        /// <summary>
        ///     Get Mass from LongHundredweight.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromLongHundredweight(QuantityValue longhundredweight)
        {
            double value = (double) longhundredweight;
            return new Mass(value, MassUnit.LongHundredweight);
        }
        /// <summary>
        ///     Get Mass from LongTons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromLongTons(QuantityValue longtons)
        {
            double value = (double) longtons;
            return new Mass(value, MassUnit.LongTon);
        }
        /// <summary>
        ///     Get Mass from Megapounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMegapounds(QuantityValue megapounds)
        {
            double value = (double) megapounds;
            return new Mass(value, MassUnit.Megapound);
        }
        /// <summary>
        ///     Get Mass from Megatonnes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMegatonnes(QuantityValue megatonnes)
        {
            double value = (double) megatonnes;
            return new Mass(value, MassUnit.Megatonne);
        }
        /// <summary>
        ///     Get Mass from Micrograms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMicrograms(QuantityValue micrograms)
        {
            double value = (double) micrograms;
            return new Mass(value, MassUnit.Microgram);
        }
        /// <summary>
        ///     Get Mass from Milligrams.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromMilligrams(QuantityValue milligrams)
        {
            double value = (double) milligrams;
            return new Mass(value, MassUnit.Milligram);
        }
        /// <summary>
        ///     Get Mass from Nanograms.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromNanograms(QuantityValue nanograms)
        {
            double value = (double) nanograms;
            return new Mass(value, MassUnit.Nanogram);
        }
        /// <summary>
        ///     Get Mass from Ounces.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromOunces(QuantityValue ounces)
        {
            double value = (double) ounces;
            return new Mass(value, MassUnit.Ounce);
        }
        /// <summary>
        ///     Get Mass from Pounds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromPounds(QuantityValue pounds)
        {
            double value = (double) pounds;
            return new Mass(value, MassUnit.Pound);
        }
        /// <summary>
        ///     Get Mass from ShortHundredweight.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromShortHundredweight(QuantityValue shorthundredweight)
        {
            double value = (double) shorthundredweight;
            return new Mass(value, MassUnit.ShortHundredweight);
        }
        /// <summary>
        ///     Get Mass from ShortTons.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromShortTons(QuantityValue shorttons)
        {
            double value = (double) shorttons;
            return new Mass(value, MassUnit.ShortTon);
        }
        /// <summary>
        ///     Get Mass from Slugs.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromSlugs(QuantityValue slugs)
        {
            double value = (double) slugs;
            return new Mass(value, MassUnit.Slug);
        }
        /// <summary>
        ///     Get Mass from Stone.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromStone(QuantityValue stone)
        {
            double value = (double) stone;
            return new Mass(value, MassUnit.Stone);
        }
        /// <summary>
        ///     Get Mass from Tonnes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Mass FromTonnes(QuantityValue tonnes)
        {
            double value = (double) tonnes;
            return new Mass(value, MassUnit.Tonne);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassUnit" /> to <see cref="Mass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Mass unit value.</returns>
        public static Mass From(QuantityValue value, MassUnit fromUnit)
        {
            return new Mass((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Mass Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Mass Parse(string str, [CanBeNull] IFormatProvider provider)
        {
            return QuantityParser.Default.Parse<Mass, MassUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Mass result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] IFormatProvider provider, out Mass result)
        {
            return QuantityParser.Default.TryParse<Mass, MassUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static MassUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            return UnitParser.Default.Parse<MassUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.MassUnit)"/>
        public static bool TryParseUnit(string str, out MassUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider provider, out MassUnit unit)
        {
            return UnitParser.Default.TryParse<MassUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Mass operator -(Mass right)
        {
            return new Mass(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Mass"/> from adding two <see cref="Mass"/>.</summary>
        public static Mass operator +(Mass left, Mass right)
        {
            return new Mass(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Mass"/> from subtracting two <see cref="Mass"/>.</summary>
        public static Mass operator -(Mass left, Mass right)
        {
            return new Mass(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Mass"/> from multiplying value and <see cref="Mass"/>.</summary>
        public static Mass operator *(double left, Mass right)
        {
            return new Mass(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Mass"/> from multiplying value and <see cref="Mass"/>.</summary>
        public static Mass operator *(Mass left, double right)
        {
            return new Mass(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Mass"/> from dividing <see cref="Mass"/> by value.</summary>
        public static Mass operator /(Mass left, double right)
        {
            return new Mass(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Mass"/> by <see cref="Mass"/>.</summary>
        public static double operator /(Mass left, Mass right)
        {
            return left.Kilograms / right.Kilograms;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Mass left, Mass right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Mass left, Mass right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Mass left, Mass right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Mass left, Mass right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Mass, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Mass left, Mass right)
        {
            return left is null ? right is null : left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Mass, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Mass left, Mass right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is Mass objMass)) throw new ArgumentException("Expected type Mass.", nameof(obj));

            return CompareTo(objMass);
        }

        /// <inheritdoc />
        public int CompareTo(Mass other)
        {
            if(other is null) throw new ArgumentNullException(nameof(other));

            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Mass, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is Mass objMass))
                return false;

            return Equals(objMass);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Mass, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Mass other)
        {
            return other != null ? _value.Equals(other.GetValueAs(this.Unit)) : false;
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Mass within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Mass other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Mass.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitForUnitSystem = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
            return As(unitForUnitSystem);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is MassUnit unitAsMassUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassUnit)} is supported.", nameof(unit));

            return As(unitAsMassUnit);
        }

        /// <summary>
        ///     Converts this Mass to another Mass with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Mass with the specified unit.</returns>
        public Mass ToUnit(MassUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Mass(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is MassUnit unitAsMassUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(MassUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsMassUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Mass ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem == null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitForUnitSystem = Info.GetUnitInfoFor(unitSystem.BaseUnits).Value;
            return ToUnit(unitForUnitSystem);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<MassUnit> IQuantity<MassUnit>.ToUnit(MassUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<MassUnit> IQuantity<MassUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MassUnit.Centigram: return (_value/1e3) * 1e-2d;
                case MassUnit.Decagram: return (_value/1e3) * 1e1d;
                case MassUnit.Decigram: return (_value/1e3) * 1e-1d;
                case MassUnit.Grain: return _value/15432.358352941431;
                case MassUnit.Gram: return _value/1e3;
                case MassUnit.Hectogram: return (_value/1e3) * 1e2d;
                case MassUnit.Kilogram: return (_value/1e3) * 1e3d;
                case MassUnit.Kilopound: return (_value*0.45359237) * 1e3d;
                case MassUnit.Kilotonne: return (_value*1e3) * 1e3d;
                case MassUnit.LongHundredweight: return _value/0.01968413055222121;
                case MassUnit.LongTon: return _value*1.0160469088e3;
                case MassUnit.Megapound: return (_value*0.45359237) * 1e6d;
                case MassUnit.Megatonne: return (_value*1e3) * 1e6d;
                case MassUnit.Microgram: return (_value/1e3) * 1e-6d;
                case MassUnit.Milligram: return (_value/1e3) * 1e-3d;
                case MassUnit.Nanogram: return (_value/1e3) * 1e-9d;
                case MassUnit.Ounce: return _value/35.2739619;
                case MassUnit.Pound: return _value*0.45359237;
                case MassUnit.ShortHundredweight: return _value/0.022046226218487758;
                case MassUnit.ShortTon: return _value*9.0718474e2;
                case MassUnit.Slug: return _value/6.852176556196105e-2;
                case MassUnit.Stone: return _value/0.1574731728702698;
                case MassUnit.Tonne: return _value*1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(MassUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MassUnit.Centigram: return (baseUnitValue*1e3) / 1e-2d;
                case MassUnit.Decagram: return (baseUnitValue*1e3) / 1e1d;
                case MassUnit.Decigram: return (baseUnitValue*1e3) / 1e-1d;
                case MassUnit.Grain: return baseUnitValue*15432.358352941431;
                case MassUnit.Gram: return baseUnitValue*1e3;
                case MassUnit.Hectogram: return (baseUnitValue*1e3) / 1e2d;
                case MassUnit.Kilogram: return (baseUnitValue*1e3) / 1e3d;
                case MassUnit.Kilopound: return (baseUnitValue/0.45359237) / 1e3d;
                case MassUnit.Kilotonne: return (baseUnitValue/1e3) / 1e3d;
                case MassUnit.LongHundredweight: return baseUnitValue*0.01968413055222121;
                case MassUnit.LongTon: return baseUnitValue/1.0160469088e3;
                case MassUnit.Megapound: return (baseUnitValue/0.45359237) / 1e6d;
                case MassUnit.Megatonne: return (baseUnitValue/1e3) / 1e6d;
                case MassUnit.Microgram: return (baseUnitValue*1e3) / 1e-6d;
                case MassUnit.Milligram: return (baseUnitValue*1e3) / 1e-3d;
                case MassUnit.Nanogram: return (baseUnitValue*1e3) / 1e-9d;
                case MassUnit.Ounce: return baseUnitValue*35.2739619;
                case MassUnit.Pound: return baseUnitValue/0.45359237;
                case MassUnit.ShortHundredweight: return baseUnitValue*0.022046226218487758;
                case MassUnit.ShortTon: return baseUnitValue/9.0718474e2;
                case MassUnit.Slug: return baseUnitValue*6.852176556196105e-2;
                case MassUnit.Stone: return baseUnitValue*0.1574731728702698;
                case MassUnit.Tonne: return baseUnitValue/1e3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString([CanBeNull] IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString([CanBeNull] IFormatProvider provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString([CanBeNull] IFormatProvider provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="formatProvider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return QuantityFormatter.Format<MassUnit>(this, format, formatProvider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Mass)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Mass)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Mass)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(Mass))
                return this;
            else if(conversionType == typeof(MassUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return Mass.QuantityType;
            else if(conversionType == typeof(BaseDimensions))
                return Mass.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Mass)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
